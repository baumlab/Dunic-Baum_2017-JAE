{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"allGh",
				"allGH_bySPP_summ"
			],
			[
				"capab",
				"capabilities"
			],
			[
				"cairo",
				"cairo_ps"
			],
			[
				"mean_sp_summg",
				"mean_spp_summ_gh2"
			],
			[
				"mean_spp",
				"mean_spp_summ_gh2"
			],
			[
				"mean_sppsu",
				"mean_spp_summ_gh2"
			],
			[
				"meanspp",
				"mean_spp_summ_gh2"
			],
			[
				"meansppsu",
				"mean_spp_summ_gh2"
			],
			[
				"geom_",
				"geom_segment"
			],
			[
				"scale_log",
				"scale_x_log10"
			],
			[
				"FL",
				"FALSE"
			],
			[
				"boote",
				"boot_ref_int"
			],
			[
				"elem",
				"element_text"
			],
			[
				"elemen",
				"element_text"
			],
			[
				"ref_int",
				"ref_intercept_iso"
			],
			[
				"boot_",
				"boot_ref_int"
			],
			[
				"midp",
				"midpoint_y"
			],
			[
				"midpoin",
				"midpoint_x"
			],
			[
				"all_fg_g",
				"all_fg_GH_summ"
			],
			[
				"alfg",
				"all_fg_GH_graph_df"
			],
			[
				"ref_in",
				"ref_intercept_iso"
			],
			[
				"allfg",
				"all_fg_GH_graph_df"
			],
			[
				"all_fgsu",
				"all_fg_GH_summ"
			],
			[
				"all_gf",
				"all_fg_GH_graph_df"
			],
			[
				"boot_spps",
				"boot_spp_summary_gh"
			],
			[
				"boot_spp",
				"boot_spp_SMA_gh_10000"
			],
			[
				"elementl",
				"element_blank"
			],
			[
				"boot_spp_summ",
				"boot_spp_summary_gh"
			],
			[
				"set",
				"set_vp"
			],
			[
				"P_prey",
				"P_prey_SL"
			],
			[
				"Fa",
				"FALSE"
			],
			[
				"boo",
				"boot_means_noCA"
			],
			[
				"mkboo",
				"mk_boot_summ_df_p"
			],
			[
				"boot",
				"bootSMA_noCA"
			],
			[
				"sc",
				"scale_x_log10"
			],
			[
				"scal",
				"scale_y_log10"
			],
			[
				"para",
				"parallel"
			],
			[
				"int",
				"p_int"
			],
			[
				"bootSMA",
				"bootSMA_eqns"
			],
			[
				"spb",
				"sp_name_by_slope"
			],
			[
				"c",
				"cum	Cummulative"
			],
			[
				"bi",
				"bi_50"
			],
			[
				"mlutcom",
				"multcompmatrix"
			],
			[
				"Speci",
				"SpeciesCode"
			],
			[
				"Plt",
				"Plectroglyphidodon"
			],
			[
				"mkspp",
				"mk_smaSPP_graph_df"
			],
			[
				"ref",
				"ref_intercept"
			],
			[
				"z",
				"z"
			],
			[
				"b",
				"b"
			],
			[
				"R_",
				"RT_Kiritimati"
			],
			[
				"grey",
				"grey70"
			],
			[
				"T",
				"T"
			],
			[
				"parc",
				"paarca"
			],
			[
				"apfur",
				"apfurc"
			],
			[
				"zoopl",
				"zoop_plot"
			],
			[
				"bla",
				"blankPanel"
			],
			[
				"intecept",
				"ref_intercept"
			],
			[
				"spps",
				"spp_lines"
			],
			[
				"refin",
				"ref_intercept_row"
			],
			[
				"min",
				"midpoint_y"
			],
			[
				"TRUE",
				"TRUE"
			],
			[
				"h",
				"h"
			],
			[
				"no",
				"no_aokp_gaj"
			],
			[
				"Region",
				"Regions"
			],
			[
				"Spe",
				"SpeciesCode"
			],
			[
				"mksmap",
				"mk_smaSPP_graph_df"
			],
			[
				"u",
				"UROD"
			],
			[
				"Specid",
				"SpecimenID"
			],
			[
				"rowkf",
				"row_kif12_171"
			],
			[
				"AR",
				"ARGU"
			],
			[
				"mul",
				"multcomp"
			],
			[
				"diss",
				"dissected_by"
			],
			[
				"Di",
				"dissected_by"
			],
			[
				"cam",
				"camela_plot"
			],
			[
				"li",
				"df_lines"
			],
			[
				"region",
				"Region"
			],
			[
				"position",
				"position_jitter"
			],
			[
				"camela",
				"camela_graph_df"
			],
			[
				"F",
				"F"
			],
			[
				"slpte",
				"slopetest"
			],
			[
				"B",
				"b"
			],
			[
				"s",
				"spp"
			],
			[
				"fk_Sp",
				"fk_Species"
			],
			[
				"fk_T",
				"fk_Treatment__TreatmentCode"
			],
			[
				"packe",
				"packed_notes"
			],
			[
				"samp",
				"samp_notes"
			],
			[
				"col",
				"col_notes"
			],
			[
				"row",
				"row"
			],
			[
				"stomachsam",
				"stomach_sample"
			],
			[
				"select",
				"select_related"
			],
			[
				"sle",
				"select_related"
			],
			[
				"na_spec",
				"na_spec"
			],
			[
				"packed",
				"packedsamples_set"
			],
			[
				"N",
				"NullBooleanField"
			],
			[
				"fk",
				"fk_Packed"
			],
			[
				"samples",
				"samples"
			],
			[
				"En",
				"EnteredBy"
			],
			[
				"sample",
				"sample_id"
			],
			[
				"D",
				"D"
			],
			[
				"fk_Tra",
				"packedsamples__fk_TrayName__Submitted"
			],
			[
				"Fg",
				"Fg"
			],
			[
				"fk_G",
				"fk_Species__fk_Guild__GuildCode"
			],
			[
				"Sic",
				"fk_Species__ScientificName"
			],
			[
				"values",
				"values_list"
			],
			[
				"fk_Species",
				"fk_Specimen__fk_Species__fk_Type__Type"
			],
			[
				"write",
				"writerow"
			],
			[
				"fk_f",
				"fk_Species__Family"
			],
			[
				"fk_Species__",
				"fk_Species__EnglishName"
			],
			[
				"fk_Species__Sc",
				"fk_Species__ScientificName"
			],
			[
				"date",
				"date_collected"
			],
			[
				"specimen",
				"specimen_id"
			],
			[
				"speci",
				"specimen_id"
			],
			[
				"cole",
				"collected_by"
			],
			[
				"dat",
				"date_collected"
			],
			[
				"dateco",
				"date_collected"
			],
			[
				"datec",
				"date_collected"
			],
			[
				"dpthcolecd",
				"depth_collected"
			],
			[
				"dept",
				"depth_collected"
			],
			[
				"dep",
				"depth_collected"
			],
			[
				"Depth",
				"depth_collected"
			],
			[
				"fk_",
				"fk_Species__fk_Guild__GuildCode"
			],
			[
				"spec",
				"species_count"
			],
			[
				"sp",
				"sp"
			],
			[
				"fk_P",
				"fk_Packed__fk_Sample__fk_Specimen__fk_Species__fk_Guild__GuildCode"
			],
			[
				"sel",
				"select_related"
			],
			[
				"fk_Speci",
				"fk_Species__SpeciesCode"
			],
			[
				"fk_Spe",
				"fk_Specimen__fk_Species__SpeciesCode"
			],
			[
				"samps",
				"samps"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "if (getwd() != '/Users/jillian/R_projects/Allometry') setwd('Allometry')\n\nlibrary(ape)\nlibrary(nlme)\nlibrary(multcomp)\nlibrary(beepr)\nlibrary(visreg)\nlibrary(dplyr)\n\n# Prepare phylogenetic tree and bootstrapped species data for analysis\n#-------------------------------------------------------------------------------\nboot_spp_summary <- read.csv('species_bootstrapped_coefficients_10000.csv')\n\nboot_spp_summary_gh <- \n  read.csv('gape_height_species_bootstrapped_coefficients_10000.csv')\n\nboot_spp_summary_gw <- \n  read.csv('gape_width_species_bootstrapped_coefficients_10000.csv')\n\n# Read in Jon's tree\nfishTree <- read.tree('Jillian tree.txt')\n\n# drop outgroup\nfishTree_no_out <- drop.tip(fishTree, \"OUTGROUP_Myxine_glutinosa\")\nfishTree_no_out <- drop.tip(fishTree_no_out, \"Chaetodon_ornatissimus\")\n\nspp_names <- fishTree_no_out$tip.label\nspp_codes <- c('AC.NIGR', 'AC.OLIV', 'AP.FURC', 'LU.BOHA', 'CA.TERE', \n               'PT.TILE', 'PS.DISP', 'PS.OLIV', 'CE.ARGU', 'CE.UROD', \n               'VA.LOUT', 'CH.VAND', 'MO.GRAN', 'CH.SORD', 'SC.FREN', \n               'SC.RUBR', 'PA.ARCA', 'CA.MELA', 'PA.INSU', 'CE.FLAV')#, \n               #'CH.ORNA')\n\n# Create lookup dataframes\nfg_lookup <- unique(data.frame('codes' = pento$Species, 'fg' = pento$j_fg))\nspp_lookup_df <- data.frame('species' = spp_names, 'codes' = spp_codes)\nfam_lookup <- ddply(fish, .(SpeciesCode), summarise, 'Family' = unique(Family), \n                    'Order' = unique(Order))\nspp_lookup_df <- merge(spp_lookup_df, fg_lookup)\n\n# Gape area\nall_spp_summ_df <- merge(fam_lookup, boot_spp_summary, \n                         by.x = 'SpeciesCode', by.y = 'group')\nall_spp_summ_df <- merge(spp_lookup_df, all_spp_summ_df, by.x = 'codes', \n                         by.y = 'SpeciesCode')\n\nmean_spp_summ <- ddply(all_spp_summ_df, .(codes), summarise, \n                       'slope' = mean(Slope), \n                       'fg' = unique(fg), \n                       'species' = unique(species), \n                       'se' = sd(Slope))\nrow.names(mean_spp_summ) <- mean_spp_summ$species\n\n# Gape height\nall_spp_summ_df_gh <- merge(fam_lookup, boot_spp_summary_gh, \n                         by.x = 'SpeciesCode', by.y = 'group')\nall_spp_summ_df_gh <- merge(spp_lookup_df, all_spp_summ_df_gh, by.x = 'codes', \n                         by.y = 'SpeciesCode')\n\nmean_spp_summ_gh <- ddply(all_spp_summ_df_gh, .(codes), summarise, \n                       'slope' = mean(Slope), \n                       'fg' = unique(fg), \n                       'species' = unique(species), \n                       'se' = sd(Slope))\nrow.names(mean_spp_summ_gh) <- mean_spp_summ_gh$species\n\n# Gape height\nall_spp_summ_df_gw <- merge(fam_lookup, boot_spp_summary_gw, \n                         by.x = 'SpeciesCode', by.y = 'group')\nall_spp_summ_df_gw <- merge(spp_lookup_df, all_spp_summ_df_gw, by.x = 'codes', \n                         by.y = 'SpeciesCode')\n\nmean_spp_summ_gw <- ddply(all_spp_summ_df_gw, .(codes), summarise, \n                       'slope' = mean(Slope), \n                       'fg' = unique(fg), \n                       'species' = unique(species), \n                       'se' = sd(Slope))\nrow.names(mean_spp_summ_gw) <- mean_spp_summ_gw$species\n\n#-------------------------------------------------------------------------------\n# Prepare phylogenetic information (excluding PS.BART for now)\n#-------------------------------------------------------------------------------\n\n# Make tree ultrametric\nchronos_tree1 <- chronos(fishTree_no_out, lambda = 1)\n#chronos_tree0 <- chronos(fishTree_no_out, lambda = 0)\n\n#-------------------------------------------------------------------------------\n# Fit pgls and account for intraspecies variation\n#-------------------------------------------------------------------------------\n\n# Need to filter out the CH.ORNA data otherwise the calculation of the likelihood\n# solution fails to converge. Must be removed from both the mean_spp_summ and \n# the design matrix.\nmean_spp_summ <- dplyr::filter(mean_spp_summ, codes != 'CH.ORNA')\n# Gape area\ndesign_mat <- model.matrix(~ fg - 1, data = dplyr::filter(mean_spp_summ, codes != 'CH.ORNA'))[, -5]\nslopes <- setNames(mean_spp_summ$slope, mean_spp_summ$species)\nses <- setNames(mean_spp_summ$se, mean_spp_summ$species)\n\n# Gape height\nmean_spp_summ_gh <- dplyr::filter(mean_spp_summ_gh, codes != 'CH.ORNA')\ndesign_mat_gh <- model.matrix(~ fg - 1, data = dplyr::filter(mean_spp_summ_gh, codes != 'CH.ORNA'))[, -5]\nslopes_gh <- setNames(mean_spp_summ_gh$slope, mean_spp_summ_gh$species)\nses_gh <- setNames(mean_spp_summ_gh$se, mean_spp_summ_gh$species)\n\n# Gape height\nmean_spp_summ_gw <- dplyr::filter(mean_spp_summ_gw, codes != 'CH.ORNA')\ndesign_mat_gw <- model.matrix(~ fg - 1, data = dplyr::filter(mean_spp_summ_gw, codes != 'CH.ORNA'))[, -5]\nslopes_gw <- setNames(mean_spp_summ_gw$slope, mean_spp_summ_gw$species)\nses_gw <- setNames(mean_spp_summ_gw$se, mean_spp_summ_gw$species)\n\n\n# Custom function to calculate the error that includes phylogenetic correlation\n# and measurement error (from bootstrap).\n# Measurement error is set to NULL as the default, such that using pgls using \n# the covariance matrix calculated in this function or using just the plain\n# phylogenetic correlation structure should give the same answer.\nlk <- function (sig2, y, X, C, v=NULL, opt=TRUE) {\n    n <- nrow(C)\n\n    if (is.null(v)) { v <- rep(0, n) }\n    \n    V <- sig2 * C + diag(v)\n    beta <- solve(t(X) %*% solve(V) %*% X) %*% (t(X) %*% \n        solve(V) %*% y)\n    logL <- -(1/2) * t(y - X %*% beta) %*% solve(V) %*% \n        (y - X %*% beta) - (1/2) * determinant(V, \n        logarithm = TRUE)$modulus - (n / 2) * log(2 * pi)\n    \n    if (opt == TRUE) { \n        return(-logL)\n        } else { \n            return(list(beta = beta, sig2e = sig2, logL = logL))\n        }\n}\n\n# Gape area fit model\nfit.lk <- optimize(lk, c(0, 1000), y = slopes, X = design_mat, C = vcv(chronos_tree1), v = ses)\nfitted <- lk(fit.lk$minimum, y = slopes, X = design_mat, C = vcv(chronos_tree1), v = ses, opt = FALSE)\nfitted\n\n# Gape height fit model\nfit.lk_gh <- optimize(lk, c(0, 1000), y = slopes_gh, X = design_mat_gh, C = vcv(chronos_tree1), v = ses_gh)\nfitted_gh <- lk(fit.lk_gh$minimum, y = slopes_gh, X = design_mat_gh, C = vcv(chronos_tree1), v = ses_gh, opt = FALSE)\nfitted_gh\n\n# Gape width fit model\nfit.lk_gw <- optimize(lk, c(0, 1000), y = slopes_gw, X = design_mat_gw, C = vcv(chronos_tree1), v = ses_gw)\nfitted_gw <- lk(fit.lk_gw$minimum, y = slopes_gw, X = design_mat_gw, C = vcv(chronos_tree1), v = ses_gw, opt = FALSE)\nfitted_gw\n\n\n\n# From Liam's blog post: \n# http://blog.phytools.org/2015/05/pgls-with-measurement-or-sampling-error.html\n# \"Now, it also turns out that after we have optimized sig2e we can actually \n# coerce gls into giving us the correct fitted model & likelihood. Here, I do \n# this by distorting the edge lengths of our tree to take into account the \n# fitted sig2e and within-species errors in y.\"\n\n# Gape area Coerce tree\ntt <- chronos_tree1\ntt$edge.length <- tt$edge.length * fitted$sig2e\nfor(i in 1:length(ses)){\n    tip <- which(tt$tip.label == names(ses)[i])\n    ii <- which(tt$edge[,2] == tip)\n    tt$edge.length[ii] <- tt$edge.length[ii] + ses[i]\n}\nvv <- diag(vcv(tt))\nw <- varFixed(~vv)\nfit.gls <- gls(slopes ~ fg - 1, data = dplyr::filter(mean_spp_summ, codes != 'CH.ORNA'), correlation = corBrownian(1, tt), method = \"ML\", weights = w)\nfit.gls\nsummary(fit.gls)\n\n# Gape height Coerce tree\ntt <- chronos_tree1\ntt$edge.length <- tt$edge.length * fitted$sig2e\nfor(i in 1:length(ses_gh)){\n    tip <- which(tt$tip.label == names(ses_gh)[i])\n    ii <- which(tt$edge[,2] == tip)\n    tt$edge.length[ii] <- tt$edge.length[ii] + ses_gh[i]\n}\nvv <- diag(vcv(tt))\nw <- varFixed(~vv)\nfit.gls_gh <- gls(slopes_gh ~ fg - 1, data = mean_spp_summ_gh, correlation = corBrownian(1, tt), method = \"ML\", weights = w)\nfit.gls_gh\nsummary(fit.gls_gh)\n\n# Gape width Coerce tree\ntt <- chronos_tree1\ntt$edge.length <- tt$edge.length * fitted$sig2e\nfor(i in 1:length(ses_gw)){\n    tip <- which(tt$tip.label == names(ses_gw)[i])\n    ii <- which(tt$edge[,2] == tip)\n    tt$edge.length[ii] <- tt$edge.length[ii] + ses_gw[i]\n}\nvv <- diag(vcv(tt))\nw <- varFixed(~vv)\nfit.gls_gw <- gls(slopes_gw ~ fg - 1, data = mean_spp_summ_gw, correlation = corBrownian(1, tt), method = \"ML\", weights = w)\nfit.gls_gw\nsummary(fit.gls_gw)\n\n\n# Test for isometry\n#-------------------------------------------------------------------------------\nspp_err_iso <- glht(fit.gls, linfct = c('fgPi = 2', \n                                        'fgBI = 2', \n                                        'fgZP = 2', \n                                        'fgHe = 2'))#, \n                                        #'fgC  = 2'))\nsummary(spp_err_iso)\n\nspp_err_iso_gh <- glht(fit.gls_gh, linfct = c('fgPi = 1', \n                                              'fgBI = 1', \n                                              'fgZP = 1', \n                                              'fgHe = 1'))#, \n                                              #'fgC  = 1'))\nsummary(spp_err_iso_gh)\n\nspp_err_iso_gw <- glht(fit.gls_gw, linfct = c('fgPi = 1', \n                                              'fgBI = 1', \n                                              'fgZP = 1', \n                                              'fgHe = 1'))#, \n                                              #'fgC  = 1'))\nsummary(spp_err_iso_gw)\n\n\n# Multiple comparisons\n#-------------------------------------------------------------------------------\n# Functions from: \n# http://rstudio-pubs-static.s3.amazonaws.com/13472_0daab9a778f24d3dbf38d808952455ce.html\n\n#model.matrix.gls <- function(object, ...) {\n#    model.matrix(terms(object), data = getData(object), ...)\n#}\n#model.frame.gls <- function(object, ...) {\n#    model.frame(formula(object), data = getData(object), ...)\n#}\n#terms.gls <- function(object, ...) {\n#    terms(model.frame(object), ...)\n#}\n\n# The line below gives pairwise comparisons now.  Note that the above\n# performs t-tests for all pairwise differences.\n#multCompTukey <- glht(fit.gls, linfct = mcp(fg = \"Tukey\"))\n\n#multCompTukey <- glht(fit.gls_gh, mcp(fg = \"Tukey\"))\n\n#summary(multCompTukey)\n\n\n#multCompTukey <- glht(fit.gls_gw, mcp(fg = \"Tukey\"))\n\n#summary(multCompTukey)\n\n\n#-------------------------------------------------------------------------------\n# Double check that our modified pgls with y-error matches under the test case\n# that the y-error = 0.\n#-------------------------------------------------------------------------------\n#design_mat <- model.matrix(~ fg - 1, data = mean_spp_summ)\n#slopes <- setNames(mean_spp_summ$slope, mean_spp_summ$species)\n#ses <- setNames(mean_spp_summ$se, mean_spp_summ$species)\n#ses <- setNames(rep(0, 21), mean_spp_summ$species)\n\n#fit.lk <- optimize(lk, c(0, 1000),y = slopes, X = design_mat, C = vcv(chronos_tree1), v = NULL)\n#fitted <- lk(fit.lk$minimum, y = slopes, X = design_mat, C = vcv(chronos_tree1), v = NULL, opt = FALSE)\n#fitted\n\n# Coerce tree:\n#tt <- chronos_tree1\n#tt$edge.length <- tt$edge.length * fitted$sig2e\n#for(i in 1:length(ses)){\n#    tip <- which(tt$tip.label == names(ses)[i])\n#    ii <- which(tt$edge[,2] == tip)\n#    tt$edge.length[ii] <- tt$edge.length[ii] + ses[i]\n#}\n#vv <- diag(vcv(tt))\n#w <- varFixed(~vv)\n\n#fit.gls <- gls(slopes ~ fg - 1, data = mean_spp_summ, correlation = corBrownian(1, tt), method = \"ML\", weights = w)\n#fit.gls\n#summary(fit.gls)\n\n# Regular pgls using the chronos_tree1\n#fit.gls.test <- gls(slopes ~ fg - 1, data = mean_spp_summ, correlation = corBrownian(1, chronos_tree1), method = \"ML\")\n#fit.gls.test\n\n# Woohoo!\n#all.equal(coef(fit.gls), coef(fit.gls.test))\n#all.equal(fit.gls$varBeta, fit.gls.test$varBeta)\n\n# Slope comparison plots for MS\nfit.gls$data <- dplyr::filter(mean_spp_summ, codes != 'CH.ORNA')\nv <- visreg(fit.gls)\n\nv$fit$visregLwr <- as.data.frame(confint(fit.gls, param.CI=0.95))[[1]]\nv$fit$visregUpr <- as.data.frame(confint(fit.gls, param.CI=0.95))[[2]]\n\n\n# Gape height\nfit.gls_gh$data <- dplyr::filter(mean_spp_summ_gh, codes != 'CH.ORNA')\nvgh <- visreg(fit.gls_gh)\n\nvgh$fit$visregLwr <- as.data.frame(confint(fit.gls_gh, param.CI=0.95))[[1]]\nvgh$fit$visregUpr <- as.data.frame(confint(fit.gls_gh, param.CI=0.95))[[2]]\n\n# Gape width\nfit.gls_gw$data <- dplyr::filter(mean_spp_summ_gw, codes != 'CH.ORNA')\n\nvgw <- visreg(fit.gls_gw)\n\nvgw$fit$visregLwr <- as.data.frame(confint(fit.gls_gw, param.CI=0.95))[[1]]\nvgw$fit$visregUpr <- as.data.frame(confint(fit.gls_gw, param.CI=0.95))[[2]]\n\n#------------------------------------------------------------------------------\n# Phylogenetically corrected comparisons of slopes\n#------------------------------------------------------------------------------\nmean_spp_summ_gh2 <- left_join(mean_spp_summ_gh, vgh$fit) %>% \n  mutate(id = as.numeric(codes)) %>% \n  mutate(fg = factor(fg, levels = levels(mean_spp_summ_gh$fg))) %>% \n  arrange(., fg)\n\nspacing <- c(seq(0, 1, length.out = 6), seq(0, 1, length.out = 3), \n             seq(0, 1, length.out = 5), seq(0, 1, length.out = 6))\nmean_spp_summ_gh2$spacing <- spacing\n\nline_fits_gh <- \n  mean_spp_summ_gh2 %>% group_by(fg, visregLwr, visregUpr, visregFit) %>% summarise(count = length(fg)) %>% as.data.frame\n\ngh_plot <- \nggplot(mean_spp_summ_gh2) +\n  geom_rect(data = line_fits_gh, aes(xmin = -0.05, xmax = 1.05, ymin = visregLwr, ymax = visregUpr), fill = \"gray85\") +\n  geom_point(aes(x = -0.2, y = 1), alpha = 0) +\n  geom_point(aes(x = spacing, y = slope), size = 1, colour = \"gray50\") + \n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  theme(panel.margin = unit(0, \"cm\")) +\n  theme(panel.border = element_blank()) +\n  theme(plot.margin = unit(c(1.5,0.5,0.5,0.5), \"lines\")) +\n  theme(strip.background = element_rect(fill = \"white\", colour = \"white\")) +\n  theme(axis.line = element_line()) +\n  theme(strip.text.x = element_blank()) +\n  theme(axis.text.x = element_blank(), \n        axis.text.y = element_text(margin = margin(0, 6, 0, 0)), \n        #axis.ticks.x=element_blank(), \n        axis.title.x=element_blank(),\n        axis.title.y = element_blank(), \n        axis.ticks.length = unit(-0.1, \"cm\")) +\n  geom_segment(data=line_fits_gh, aes(y = visregFit, yend = visregFit, x = -0.05, xend = 1.05), colour = '#099DFFFF', size = 1, lineend = 'round') +\n  geom_hline(aes(yintercept = 1), colour = 'red', linetype = 2) +\n  scale_x_continuous(breaks = 0.5) +\n  scale_y_continuous(breaks = c(0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0), lim =c(0.6, 2)) +\n  facet_grid(. ~ fg) \n\nmean_spp_summ_gw2 <- left_join(mean_spp_summ_gw, vgw$fit) %>% \n  mutate(id = as.numeric(codes)) %>% \n  mutate(fg = factor(fg, levels = levels(mean_spp_summ_gw$fg))) %>% \n  arrange(., fg)\n\nspacing <- c(seq(0, 1, length.out = 6), seq(0, 1, length.out = 3), \n             seq(0, 1, length.out = 5), seq(0, 1, length.out = 6))\nmean_spp_summ_gw2$spacing <- spacing\n\nline_fits_gw <- \n  mean_spp_summ_gw2 %>% group_by(fg, visregLwr, visregUpr, visregFit) %>% summarise(count = length(fg)) %>% as.data.frame\n\ngw_plot <- \nggplot(mean_spp_summ_gw2) +\n  geom_rect(data = line_fits_gw, aes(xmin = -0.05, xmax = 1.05, ymin = visregLwr, ymax = visregUpr), fill = \"gray85\") +\n  geom_point(aes(x = -0.2, y = 1), alpha = 0) +\n  geom_point(aes(x = spacing, y = slope), size = 1, colour = \"gray50\") + \n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  theme(panel.margin = unit(0, \"cm\")) +\n  theme(panel.border = element_blank()) +\n  theme(plot.margin = unit(c(1.5,0.5,0.5,0.5), \"lines\")) +\n  theme(strip.background = element_rect(fill = \"white\", colour = \"white\")) +\n  theme(axis.line = element_line()) +\n  theme(strip.text.x = element_blank()) +\n  theme(axis.text.x = element_blank(), \n        axis.text.y = element_text(margin = margin(0, 6, 0, 0)), \n        #axis.ticks.x=element_blank(), \n        axis.title.x = element_blank(), \n        axis.title.y = element_blank(), \n        axis.ticks.length = unit(-0.1, \"cm\")) +\n  geom_segment(data=line_fits_gw, aes(y = visregFit, yend = visregFit, x = -0.05, xend = 1.05), colour = '#099DFFFF', size = 1, lineend = 'round') +\n  geom_hline(aes(yintercept = 1), colour = 'red', linetype = 2) +\n  scale_x_continuous(breaks = 0.5) +\n  scale_y_continuous(breaks = c(0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0), lim =c(0.6, 2)) +\n  #ylim(c(0.6, 2)) +\n  facet_grid(. ~ fg) \n\ndev.new(height = 6.6, width = 4.8)\n\nmaster_layout <- \ngrid.layout(nrow = 4, ncol = 6, \n            widths = unit(c(0.2, 0.3, 1, 1, 1, 1), \"null\"),\n            heights = unit(c(1, 1, 0.2, 0.1), \"null\"))\ngrid.newpage()\npushViewport(viewport(layout=master_layout))\ntop <- viewport(layout.pos.row = 1, layout.pos.col = 2:6)\nbottom <- viewport(layout.pos.row = 2, layout.pos.col = 2:6)\nprint(gh_plot, vp = top)\nprint(gw_plot, vp = bottom)\ngrid.text(\n  \"a)\", vp = viewport(layout.pos.row = 1, layout.pos.col = 1), \n  gp = gpar(fontsize = 9), vjust = -12\n  )\ngrid.text(\n  \"b)\", vp = viewport(layout.pos.row = 2, layout.pos.col = 1), \n  gp = gpar(fontsize = 9), vjust = -12\n  )\ngrid.text(\n  \"gape height slope estimate\",\n  vp = viewport(layout.pos.row = 1, layout.pos.col = 1),\n  rot = 90, gp = gpar(fontsize = 9), vjust = 1, hjust = 0.6\n    )\ngrid.text(\n  \"gape width slope estimate\",\n  vp = viewport(layout.pos.row = 2, layout.pos.col = 1),\n  rot = 90, gp = gpar(fontsize = 9), vjust = 1, hjust = 0.6\n    )\ngrid.text(\n    \"Pi\",\n    vp = viewport(layout.pos.row = 3, layout.pos.col = 3),\n    vjust = -1.2, gp = gpar(fontsize = 9), hjust = 0\n    )\ngrid.text(\n    \"BI\",\n    vp = viewport(layout.pos.row = 3, layout.pos.col = 4),\n    vjust = -1.2, gp = gpar(fontsize = 9), hjust = 0.4\n    )\ngrid.text(\n    \"ZP\",\n    vp = viewport(layout.pos.row = 3, layout.pos.col = 5),\n    vjust = -1.2, gp = gpar(fontsize = 9), hjust = 0.4\n    )\ngrid.text(\n    \"He\",\n    vp = viewport(layout.pos.row = 3, layout.pos.col = 6),\n    vjust = -1.2, gp = gpar(fontsize = 9), hjust = 0.5\n    )\ngrid.text(\"functional group\", vp = viewport(layout.pos.row = 4, layout.pos.col = 3:6),\n    gp = gpar(fontsize = 9), vjust = -3, hjust = 0.5)\ngrid.text(\"Figure 2\", vp = viewport(layout.pos.row = 4, layout.pos.col = 1:3),\n    gp = gpar(fontsize = 9), vjust = -1, hjust = 1.5)\n\ndev.copy2eps(device = quartz, file = \"panel_plots/phylogenetically_corrected_allometrice_slope_estimates.eps\")",
			"file": "11_pgls_with_yerror.R",
			"file_size": 12987,
			"file_write_time": 130984948170000000,
			"settings":
			{
				"buffer_size": 18286,
				"line_ending": "Unix"
			}
		},
		{
			"file": "plots_for_ms_species_gape_heights.R",
			"settings":
			{
				"buffer_size": 36596,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#===============================================================================\n# Multipanel plot with functional group and species\n#===============================================================================\n\n# Get community level midpoint\nallGW <- sma(gw ~ SL, data = pento, log = \"xy\", method = \"SMA\", robust = T, slope.test = 1)\n#check_assump(allGW, \"Pento Gape Area All\")\nallGW_summ <- mk_sma_summary(allGW, 1)\nallGW_graph_df <- mk_sma_graph_df(allGW_summ, 1, \"j_fg\")\nnames(allGW_graph_df)\n\n# Get functional group level metrics: midpoints of data\n# Using a single sma() iteration because this does not alter results, nor the \n# visual display of the data.\npento_slopes_gw <- coef(fit.gls_gw)\nnames(pento_slopes_gw) <- c('Pi', 'Bi', 'Zp', 'He')\n\nall_fg_GW <- sma(gw ~ SL * j_fg, data = pento, log = \"xy\", method = \"SMA\", \n                 robust = T, slope.test = 1, multcomp = F)\nall_fg_GW_summ <- mk_spp_summary(all_fg_GW, 5, grouping=TRUE)\nall_fg_GW_graph_df <- mk_smaSPP_graph_df(all_fg_GW_summ, 5, \"j_fg\")\nall_fg_GW_graph_df$boot_slope <- c(pento_slopes_gh, NA)\n\nall_fg_GW_graph_df <- \n  all_fg_GW_graph_df %>% \n    dplyr::mutate(boot_ref_int = log10(midpoint_y / (midpoint_x ^ boot_slope)))\n\n# SMA regression for each species\nall_spp_GW <- sma(gw ~ SL * SpeciesCode, data = pento, log = \"xy\", \n                  method = \"SMA\", robust = T, slope.test = 1,\n                  multcomp = F, multcompmethod = \"adjusted\")\n#check_assump(allGA, \"Species Gape Area All\")\nallGW_bySPP_summ <- mk_spp_summary(all_spp_GW, 22, grouping=TRUE)\nallGW_bySPP_graph_df <- mk_smaSPP_graph_df(allGW_bySPP_summ, 22, \"SpeciesCode\")\n\nrbind_all(list(mutate(allGH_bySPP_summ, gape = 'GH'), dplyr::mutate(allGW_bySPP_summ, gape = 'GW'))) %>% \n  readr::write_csv(., 'gape_height_width_species_summary.csv')\n\n\n\n\n#-------------------------------------------------------------------------------\n# Setting up values to plot the lines at the species level\nspp_lines <- allGW_bySPP_graph_df\n\n# Setting up equation, r^2, and n values that will be written on the graphs\nspp_sma_eqns <- write_group_sma_eqn(allGW_bySPP_summ, allGW_bySPP_summ$group)\nnames(spp_sma_eqns) <- c(\"SpeciesCode\", \"eqn_r2\", \"eqn\", \"r2\", \"n\")\n\n\nspp_lines[1, ]\n\nggplot() + \n  theme_bw() +\n  geom_point(data = p, aes(x = SL, y = gh), colour = 'grey', shape = 1) +\n  geom_point(data = p_spp_dfs$CA.MELA, aes(x = SL, y = gh), colour = 'black') + \n  geom_segment(aes(x = 178.3708, xend = 577.9654, y = 10^(1.0391357*log10(178.3708) + -0.9399020), yend = 10^(1.0391357*log10(577.9654) + -0.9399020))) + \n  scale_x_log10() + \n  scale_y_log10()\n\n#-------------------------------------------------------------------------------\n# Multipanel comparison of 3 predatory functional groups\n#-------------------------------------------------------------------------------\napfurc <- \nmk_multipanel_plots2(fg_point_df = p, spp_point_df = p_spp_dfs$AP.FURC, \n    spp_line_df_row = spp_lines[2, ], eqn_df = spp_sma_eqns[2, ], \n    eqn_x = 700, eqn_y = 20, r2_x = 700, r2_y = 25.8,\n    n_x = 700, n_y = 31, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[1], \n    x_axis_text = FALSE, y_axis_text = TRUE, \n    plot_title = \"Aphareus furca\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[1, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250, 500)) +\n    geom_point(aes(x = 100, y = 95), alpha = 0)\nluboha <- \nmk_multipanel_plots2(fg_point_df = p, spp_point_df = p_spp_dfs$LU.BOHA, \n    spp_line_df_row = spp_lines[3, ], eqn_df = spp_sma_eqns[3, ], \n    eqn_x = 700, eqn_y = 20, r2_x = 700, r2_y = 25.8, \n    n_x = 700, n_y = 31, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[1], \n    x_axis_text = FALSE, y_axis_text = FALSE, \n    plot_title = \"Lutjanus bohar\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[1, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250, 500)) +\n    geom_point(aes(x = 100, y = 95), alpha = 0)\nvalout <-\nmk_multipanel_plots2(fg_point_df = p, spp_point_df = p_spp_dfs$VA.LOUT, \n    spp_line_df_row = spp_lines[6, ], eqn_df = spp_sma_eqns[6, ], \n    eqn_x = 700, eqn_y = 20, r2_x = 700, r2_y = 25.8, \n    n_x = 700, n_y = 31, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[1], \n    x_axis_text = FALSE, y_axis_text = FALSE, \n    plot_title = \"Variola louti\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[1, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250, 500)) +\n    geom_point(aes(x = 100, y = 95), alpha = 0)\nceargu <-\nmk_multipanel_plots2(fg_point_df = p, spp_point_df = p_spp_dfs$CE.ARGU, \n    spp_line_df_row = spp_lines[4, ], eqn_df = spp_sma_eqns[4, ], \n    eqn_x = 700, eqn_y = 20, r2_x = 700, r2_y = 25.8, \n    n_x = 700, n_y = 31, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[1], \n    x_axis_text = TRUE, y_axis_text = TRUE, \n    plot_title = \"Cephalopholis argus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[1, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250, 500)) +\n    geom_point(aes(x = 100, y = 95), alpha = 0)\nceurod <-\nmk_multipanel_plots2(fg_point_df = p, spp_point_df = p_spp_dfs$CE.UROD, \n    spp_line_df_row = spp_lines[5, ], eqn_df = spp_sma_eqns[5, ], \n    eqn_x = 700, eqn_y = 20, r2_x = 700, r2_y = 25.8, \n    n_x = 700, n_y = 31, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[1], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Cephalopholis urodeta\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[1, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250, 500)) +\n    geom_point(aes(x = 100, y = 95), alpha = 0)\ncamela <- \nmk_multipanel_plots2(fg_point_df = p, spp_point_df = p_spp_dfs$CA.MELA, \n    spp_line_df_row = spp_lines[1, ], eqn_df = spp_sma_eqns[1, ], \n    eqn_x = 700, eqn_y = 20, r2_x = 700, r2_y = 25.8, \n    n_x = 700, n_y = 31, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[1], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Caranx melampygus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[1, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250, 500)) +\n    geom_point(aes(x = 100, y = 95), alpha = 0)\n# Benthic invertivores\npaarca <-\nmk_multipanel_plots2(fg_point_df = b, spp_point_df = b_spp_dfs$PA.ARCA, \n    spp_line_df_row = spp_lines[7, ], eqn_df = spp_sma_eqns[7, ],\n    eqn_x = 350, eqn_y = 4.6, r2_x = 350, r2_y = 6.8, \n    n_x = 350, n_y = 9, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[2], \n    x_axis_text = TRUE, y_axis_text = TRUE,\n    plot_title = \"Paracirrhites arcatus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[2, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) +\n    geom_point(aes(x = 100, y = 7), alpha = 0)\npainsu <-\nmk_multipanel_plots2(fg_point_df = b, spp_point_df = b_spp_dfs$PA.INSU, \n    spp_line_df_row = spp_lines[9, ], eqn_df = spp_sma_eqns[9, ], \n    eqn_x = 350, eqn_y = 4.6, r2_x = 350, r2_y = 6.8, \n    n_x = 350, n_y = 9, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[2], x_axis_text = TRUE, \n    y_axis_text = FALSE, \n    plot_title = \"Parupeneus insularis\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[2, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) +\n    geom_point(aes(x = 100, y = 7), alpha = 0)\nmogran <-\nmk_multipanel_plots2(fg_point_df = b, spp_point_df = b_spp_dfs$MO.GRAN, \n    spp_line_df_row = spp_lines[8, ], eqn_df = spp_sma_eqns[8, ], \n    eqn_x = 350, eqn_y = 4.6, r2_x = 350, r2_y = 6.8, \n    n_x = 350, n_y = 9, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept[2], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Monotaxis grandoculis\", gape_dim = 'gw' ) +\n    geom_abline(data = all_fg_GW_graph_df[2, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) +\n    geom_point(aes(x = 100, y = 7), alpha = 0)\n# Zooplanktivores\npsbart <-\nmk_multipanel_plots2(fg_point_df  = z, spp_point_df  = z_spp_dfs$PS.BART, \n    spp_line_df_row = spp_lines[13, ], eqn_df = spp_sma_eqns[13, ], \n    eqn_x = 290, eqn_y = 1.8, r2_x = 290, r2_y = 2.625, \n    n_x = 290, n_y = 3.5, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[3], \n    x_axis_text = FALSE, y_axis_text = TRUE, \n    plot_title = \"Pseudanthias bartlettorum\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[3, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250))\ncatere <-\nmk_multipanel_plots2(fg_point_df = z, spp_point_df = z_spp_dfs$CA.TERE, \n    spp_line_df_row = spp_lines[10, ], eqn_df = spp_sma_eqns[10, ], \n    eqn_x = 290, eqn_y = 1.8, r2_x = 290, r2_y = 2.625, \n    n_x = 290, n_y = 3.5, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[3], \n    x_axis_text = FALSE, y_axis_text = FALSE, \n    plot_title = \"Caesio teres\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[3, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250))\npsdisp <-\nmk_multipanel_plots2(fg_point_df  = z, spp_point_df  = z_spp_dfs$PS.DISP, \n    spp_line_df_row = spp_lines[14, ], eqn_df = spp_sma_eqns[14, ], \n    eqn_x = 290, eqn_y = 1.8, r2_x = 290, r2_y = 2.625, \n    n_x = 290, n_y = 3.5, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[3], \n    x_axis_text = TRUE, y_axis_text = TRUE, \n    plot_title = \"Pseudanthias dispar\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[3, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250))\npsoliv <-\nmk_multipanel_plots2(fg_point_df  = z, spp_point_df  = z_spp_dfs$PS.OLIV, \n    spp_line_df_row = spp_lines[15, ], eqn_df = spp_sma_eqns[15, ], \n    eqn_x = 290, eqn_y = 1.8, r2_x = 290, r2_y = 2.625, \n    n_x = 290, n_y = 3.5, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[3], \n    x_axis_text = FALSE, y_axis_text = FALSE, \n    plot_title = \"Pseudanthias olivaceus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[3, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250))\npttile <-\nmk_multipanel_plots2(fg_point_df = z, spp_point_df = z_spp_dfs$PT.TILE, \n    spp_line_df_row = spp_lines[11, ], eqn_df = spp_sma_eqns[11, ], \n    eqn_x = 290, eqn_y = 1.8, r2_x = 290, r2_y = 2.625, \n    n_x = 290, n_y = 3.5, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[3], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Pterocaesio tile\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[3, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250))\nchvand <-\nmk_multipanel_plots2(fg_point_df = z, spp_point_df = z_spp_dfs$CH.VAND, \n    spp_line_df_row = spp_lines[12, ], eqn_df = spp_sma_eqns[12, ], \n    eqn_x = 290, eqn_y = 1.2, r2_x = 290, r2_y = 1.75, \n    n_x = 290, n_y = 2.4, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[3], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Chromis vanderbilti\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[3, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250))\n\n# Plotting multipanel piscivores and benthic invertivores   \n#dev.new(height = 10, width = 7)\n#master_layout <- \n#grid.layout(nrow = 8, ncol = 4, \n#            widths = unit(c(0.2, 1, 0.9, 0.9), \"null\"),\n#            heights = unit(c(1, 1, 0.1, 1, 0.1, 1, 1, 0.1), \"null\"))\n#grid.newpage()\n\n# With \"Figure\" labelled\nmaster_layout <- \ngrid.layout(nrow = 8, ncol = 4, \n            widths = unit(c(0.2, 1, 0.9, 0.9), \"null\"),\n            heights = unit(c(1, 1.1, 0.2, 1.1, 0.2, 1, 1.1, 0.2), \"null\"))\ndev.new(height = 10, width = 7)\n\ngrid.newpage()\npushViewport(viewport(layout = master_layout))\n# piscs\nprint(apfurc, vp = set_vp(1, 2))\nprint(luboha, vp = set_vp(1, 3))\nprint(valout, vp = set_vp(1, 4))\nprint(ceargu, vp = set_vp(2, 2))\nprint(camela, vp = set_vp(2, 3))\nprint(ceurod, vp = set_vp(2, 4))\n# benths\nprint(paarca, vp = set_vp(4, 2))\nprint(painsu, vp = set_vp(4, 3))\nprint(mogran, vp = set_vp(4, 4))\n# zoops\nprint(psbart, vp = set_vp(6, 2))\nprint(catere, vp = set_vp(6, 3))\nprint(psoliv, vp = set_vp(6, 4))\nprint(psdisp, vp = set_vp(7, 2))\nprint(pttile, vp = set_vp(7, 3))\nprint(chvand, vp = set_vp(7, 4))\n\n# Figure label\ngrid.text(\"Figure 4\", vp = viewport(layout.pos.row = 8, layout.pos.col = 1),\n    gp = gpar(fontsize = 9), hjust = -1, vjust = 1)\n\n# piscs\ngrid.text(\n    \"a)\", vp = viewport(layout.pos.row = 1, layout.pos.col = 1), \n    gp = gpar(fontsize = 9), vjust = -8\n    )\ngrid.text(\n    expression( paste(\"gape width (\", mm, \")\", sep = \"\") ), \n    vp = viewport(layout.pos.row = 1:2, layout.pos.col = 1),\n    rot = 90, gp = gpar(fontsize = 9), \n    vjust = 1\n    )\ngrid.text(\n    \"standard length (mm)\",\n    vp = viewport(layout.pos.row = 3, layout.pos.col = 3),\n    vjust = -1.2, gp = gpar(fontsize = 9)\n    )\n# benths\ngrid.text(\n    \"b)\", vp = viewport(layout.pos.row = 4, layout.pos.col = 1), \n    gp = gpar(fontsize = 9), vjust = -10\n    )\ngrid.text(\n    expression( paste(\"gape width (\", mm, \")\", sep = \"\") ), \n    vp = viewport(layout.pos.row = 4, layout.pos.col = 1),\n    rot = 90, gp = gpar(fontsize = 9), \n    vjust = 1\n    )\ngrid.text(\n    \"standard length (mm)\",\n    vp = viewport(layout.pos.row = 5, layout.pos.col = 3),\n    vjust = -1.2, gp = gpar(fontsize = 9)\n    )\n# zoops\ngrid.text(\n    \"c)\", vp = viewport(layout.pos.row = 6, layout.pos.col = 1), \n    gp = gpar(fontsize = 9), vjust = -8\n    )\ngrid.text(\n    expression( paste(\"gape width (\", mm, \")\", sep = \"\") ), \n    vp = viewport(layout.pos.row = 6:7, layout.pos.col = 1),\n    rot = 90, gp = gpar(fontsize = 9), \n    vjust = 1\n    )\ngrid.text(\n    \"standard length (mm)\",\n    vp = viewport(layout.pos.row = 8, layout.pos.col = 3),\n    vjust = -1.2, gp = gpar(fontsize = 9)\n    )\n\ndev.copy2eps(device = quartz, file = \"panel_plots/gw_benth_pisc_zoop_panel_figure_label.eps\")\n\n#-------------------------------------------------------------------------------\n# Multipanel herbivores\n#-------------------------------------------------------------------------------\nacnigr <-\nmk_multipanel_plots2(fg_point_df = h, spp_point_df = h_spp_dfs$AC.NIGR, \n    spp_line_df_row = spp_lines[16, ], eqn_df = spp_sma_eqns[16, ], \n    eqn_x = 440, eqn_y = 2.5, r2_x = 440, r2_y = 3.8,\n    n_x = 440, n_y = 5.1, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[4], \n    x_axis_text = FALSE, y_axis_text = TRUE, \n    plot_title = \"Acanthurus nigricans\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[4, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) + \n    geom_point(aes(x = 40, y = 5), alpha = 0)\nceflav <-\nmk_multipanel_plots2(fg_point_df = h, spp_point_df = h_spp_dfs$CE.FLAV, \n    spp_line_df_row = spp_lines[18, ], eqn_df = spp_sma_eqns[18, ], \n    eqn_x = 440, eqn_y = 2.5, r2_x = 440, r2_y = 3.8,\n    n_x = 440, n_y = 5.1, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[4], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Centropyge flavissima\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[4, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) + \n    geom_point(aes(x = 40, y = 5), alpha = 0)\nchsord <-\nmk_multipanel_plots2(fg_point_df  = h, spp_point_df  = h_spp_dfs$CH.SORD, \n    spp_line_df_row = spp_lines[19, ], eqn_df = spp_sma_eqns[19, ], \n    eqn_x = 440, eqn_y = 2.5, r2_x = 440, r2_y = 3.8,\n    n_x = 440, n_y = 5.1, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[4], \n    x_axis_text = FALSE, y_axis_text = FALSE, \n    plot_title = \"Chlororus sordidus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[4, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) + \n    geom_point(aes(x = 40, y = 5), alpha = 0)\nscrubr <-\nmk_multipanel_plots2(fg_point_df  = h, spp_point_df  = h_spp_dfs$SC.RUBR, \n    spp_line_df_row = spp_lines[21, ], eqn_df = spp_sma_eqns[21, ], \n    eqn_x = 440, eqn_y = 2.5, r2_x = 440, r2_y = 3.8,\n    n_x = 440, n_y = 5.1, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[4], \n    x_axis_text = TRUE, y_axis_text = TRUE, \n    plot_title = \"Scarus rubroviolaceus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[4, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) + \n    geom_point(aes(x = 40, y = 5), alpha = 0)\nacoliv <-\nmk_multipanel_plots2(fg_point_df = h, spp_point_df = h_spp_dfs$AC.OLIV, \n    spp_line_df_row = spp_lines[17, ], eqn_df = spp_sma_eqns[17, ], \n    eqn_x = 440, eqn_y = 2.5, r2_x = 440, r2_y = 3.8,\n    n_x = 440, n_y = 5.1, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[4], \n    x_axis_text = FALSE, y_axis_text = FALSE, \n    plot_title = \"Acanthurus olivaceus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[4, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) + \n    geom_point(aes(x = 40, y = 5), alpha = 0)\nscfren <-\nmk_multipanel_plots2(fg_point_df  = h, spp_point_df  = h_spp_dfs$SC.FREN, \n    spp_line_df_row = spp_lines[20, ], eqn_df = spp_sma_eqns[20, ], \n    eqn_x = 440, eqn_y = 2.5, r2_x = 440, r2_y = 3.8,\n    n_x = 440, n_y = 5.1, x_axis_labels = FALSE, y_axis_labels = FALSE, \n    fg_line_intercept = all_fg_GW_graph_df$ref_intercept_iso[4], \n    x_axis_text = TRUE, y_axis_text = FALSE, \n    plot_title = \"Scarus frenatus\", gape_dim = 'gw') +\n    geom_abline(data = all_fg_GW_graph_df[4, ], \n                aes(slope = boot_slope, intercept = boot_ref_int), linetype = 2) +\n    scale_x_log10(breaks = c(50, 100, 250)) + \n    geom_point(aes(x = 40, y = 5), alpha = 0)\n\n# With \"Figure\" label\ndev.new(height = 4, width = 7)\nmaster_layout <- \ngrid.layout(nrow = 3, ncol = 4, \n            widths = unit(c(0.2, 1, 0.9, 0.9), \"null\"),\n            heights = unit(c(1, 1.1, 0.2), \"null\"))\ngrid.newpage()\n\npushViewport(viewport(layout = master_layout))\nprint(acnigr, vp = set_vp(1, 2))\nprint(acoliv, vp = set_vp(1, 3))\nprint(chsord, vp = set_vp(1, 4))\nprint(scrubr, vp = set_vp(2, 2))\nprint(scfren, vp = set_vp(2, 3))\nprint(ceflav, vp = set_vp(2, 4))\n\n# Figure label\ngrid.text(\"Figure 5\", vp = viewport(layout.pos.row = 3, layout.pos.col = 1), \n    gp = gpar(fontsize = 9), hjust = -1, vjust = 1)\n\ngrid.text(\n    expression( paste(\"gape width (\", mm, \")\", sep = \"\") ), \n    vp = viewport(layout.pos.row = 1:2, layout.pos.col = 1),\n    rot = 90, gp = gpar(fontsize = 9), \n    vjust = 2\n    )\ngrid.text(\n    \"standard length (mm)\",\n    vp = viewport(layout.pos.row = 3, layout.pos.col = 3),\n    vjust = -1.2, gp = gpar(fontsize = 9)\n    )\n\ndev.copy2eps(device = quartz, file = \"panel_plots/gw_herb_panel_figure_label.eps\")\n\n#===============================================================================\n# Relative gape size\n#===============================================================================\n\n# Pento factored by functional group then slope\nSpeciesCode <- c(\"AP.FURC\", \"LU.BOHA\", \"VA.LOUT\", \"CA.MELA\", \"CE.ARGU\", \"CE.UROD\",\n                 \"PA.ARCA\", \"PA.INSU\", \"MO.GRAN\",\n                 \"PS.BART\", \"CA.TERE\", \"PS.OLIV\", \"PS.DISP\", \"PT.TILE\", \"CH.VAND\",\n                 \"AC.NIGR\", \"AC.OLIV\",  \"CH.SORD\", \"SC.RUBR\", \"SC.FREN\", \"CE.FLAV\",\n                 \"CH.ORNA\"\n                 )\n\nsp_name_by_slope <- \n    c(\"Aphareus furca\", \"Lutjanus bohar\", \"Variola louti\", \"Caranx melampygus\", \n      \"Cephalopholis argus\", \"Cephalopholis urodeta\", \n      \"Paracirrhites arcatus\", \"Parupeneus insularis\", \"Monotaxis grandoculis\", \n      \"Pseudanthias bartlettorum\", \"Caesio teres\", \"Pseudanthias olivaceus\", \"Pseudanthias dispar\", \"Pterocaesio tile\", \"Chromis vanderbilti\", \n      \"Acanthurus nigricans\", \"Acanthurus olivaceus\", \"Chlororus sordidus\", \"Scarus rubroviolaceus\", \"Scarus frenatus\", \"Centropyge flavissima\", \n      \"Chaetodon ornatissimus\"\n      )\n\nspp_key <- data.frame(SpeciesCode, sp_name_by_slope)\npento_by_slope <- merge(x = pento, y = spp_key, all.x = TRUE, all.y = FALSE)\n#pento_by_slope$SpeciesCode <- factor(pento_by_slope$SpeciesCode, levels = SpeciesCode)\npento_by_slope$sp_name_by_slope <- factor(pento_by_slope$sp_name_by_slope, levels = sp_name_by_slope)\n\n#-------------------------------------------------------------------------------\n# Removing ceargu_out (CE.ARGU outlier)\n#-------------------------------------------------------------------------------\n# Finding outlier in boxplot Cephalopholis argus\nceargu_df <- fish[(which(fish$SpeciesCode == \"CE.ARGU\")), ]\n\nceargu_out <- which(ceargu_df$gw_ratio == max(ceargu_df$gw_ratio))\nceargu_df[ceargu_out, ]\n#    SpecimenID     Family       Order         Genus SpeciesCode j_fg Site\n#633  KIF12_171 Serranidae Perciformes Cephalopholis     CE.ARGU   Pi   40\n#    Region    TL    SL FL  wt length.cm. a..cm. b..cm. calc_wt   gh   gw\n#633  HP.MF 138.6 134.2 NA 380         NA     NA     NA      NA 63.9 66.5\n#    dissected_by  stomach_contents prey_size coll_notes dis_notes       ga\n#633           MW shrimp; see photo    30.1mm                      3337.432\n#    gh_ratio  gw_ratio  ga_ratio observer_id\n#633 0.476155 0.4955291 0.1853136          13\n\nbp_outlier <- which(pento_by_slope$SpecimenID == \"KIF12_171\")\npento_by_slope <- pento_by_slope[-bp_outlier, ]\n\n\n# With facets:\nfgs <- list('Pi' = \"PI\",\n            'BI' = \"BI\", \n            'ZP' = \"ZP\", \n            'He' = \"HE\", \n            'C'  = \"CO\")\n\nfg_labeller <- function(variable, value){\n  return(fgs[value])\n}\n\nrel_gw <- \nggplot(pento_by_slope, aes(.id, value, dodge = j_fg)) +\n  geom_boxplot(aes(x=sp_name_by_slope, y=gw/(SL))) +\n  xlab(\"Species\") +\n  ylab(\"Relative gape width\") +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  theme(axis.text.x = element_text(angle=45, colour=\"black\", hjust=1, size = 9)) +\n  theme(axis.text.y = element_text(colour=\"black\")) +\n  theme(axis.title.x = element_text(vjust = -0.2, size = 9)) +\n  theme(axis.title.y = element_text(vjust = 0.15, size = 9)) +\n  theme(legend.position = c(0.64, 0.9)) +\n  theme(legend.background = element_rect(fill = \"#FFFFFFaa\", colour = 'NA')) +\n  theme(legend.text = element_text(size = 8)) +\n  theme(panel.margin = unit(0.5, \"cm\")) +\n  theme(panel.border = element_blank()) +\n  theme(strip.background = element_rect(fill = \"white\", colour = \"white\")) +\n  theme(axis.line = element_line()) +\n  facet_grid(. ~ j_fg, space = \"free\", scales = \"free\", labeller = labeller(fgs = fg_labeller))\ndev.new(height = 5, width = 8)\nrel_gw\n\n# With \"Figure\" label\nmaster_layout <- \ngrid.layout(nrow = 2, ncol = 1, \n            widths = unit(c(1), \"null\"),\n            heights = unit(c(1, 0.05), \"null\"))\ngrid.newpage()\npushViewport(viewport(layout = master_layout))\nprint(rel_gw, vp = set_vp(1, 1))\n\n# Figure label\n#grid.text(\"Figure 3\", vp = viewport(layout.pos.row = 2, layout.pos.col = 1), \n #   gp = gpar(fontsize = 9), hjust = 8, vjust = -1)\ndev.copy2eps(device = quartz, file = \"panel_plots/rel_gw_figure_label.eps\")\n\n\n#===============================================================================\n# Predator prey size graphs\n#===============================================================================\n\n#===============================================================================\n# STANDARD LENGTH PRED - PREY\n# Graphs for piscivores prey size - predator STANDARD LENGTH\nP_prey_SL <- prey_PiBI[which(prey_PiBI$j_fg == 'Pi'), ]\ndf.n <- ddply(.data=P_prey_SL, .(j_fg), summarize, n=paste(\"n ==\", length(SL)))\npisc_prey <-\nggplot(data = P_prey_SL, aes(x = SL, y = pSize)) +\n  geom_point(aes(shape = pType)) +\n  scale_shape_manual(values=c(1, 19)) +\n  geom_text(data = df.n, aes(x = 90, y = 230, label = n), parse = TRUE, \n            size = 3, hjust = 0) +\n  theme_bw() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.line = element_line(color = 'black')) +\n  theme(legend.position = \"none\") +\n  theme(axis.title = element_blank()) +\n  #geom_smooth(method = \"lm\") +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.50, 0.90), method = \"rq\", \n                colour = \"black\") +\n  theme(axis.ticks.length = unit(-0.2, \"cm\"),\n        axis.text.y = element_text(margin = margin(0, 8, 0, 0)), \n        axis.text.x = element_text(margin = margin(8, 0, 0, 0), vjust = 1))\n\n# Benthic invertivore stomach contents for predator STANDARD LENGTH\nB_prey_SL <- prey_PiBI[which(prey_PiBI$j_fg == 'BI'), ]\n# Graph of just benthic invertivore stomach contents:\ndf.n <- ddply(.data=B_prey_SL, .(j_fg), summarize, n=paste(\"n ==\", length(j_fg)))\nbenth_prey <- \nggplot(data = B_prey_SL, aes(x = SL, y = pSize)) +\n  geom_point(aes(shape = pType)) +\n  geom_point(aes(x = 510, y = 100), alpha = 0.0) +\n  geom_point(aes(x = 49, y = 258), alpha = 0.0) +\n  scale_shape_manual(values=c(1, 19)) +\n  geom_text(data = df.n, aes(x = 90, y = 230, label = n), parse = TRUE, \n            size = 3, hjust = 0) +\n  theme_bw() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.line = element_line(color = 'black')) +\n  theme(legend.position = \"none\") +\n  theme(axis.title = element_blank()) +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.50, 0.90), method = \"rq\", \n                colour = \"black\") +\n  theme(axis.ticks.length = unit(-0.2, \"cm\"), \n        axis.text.y = element_text(margin = margin(0, 8, 0, 0)), \n        axis.text.x = element_text(margin = margin(8, 0, 0, 0), vjust = 1))\n\n#camela_prey_SL <- prey_PiBI[which(prey_PiBI$SpeciesCode == 'CA.MELA'), ]\n#ggplot(data = camela_prey_SL, aes(x = SL, y = pSize)) +\n # geom_point(aes(shape = pType))\n\ndev.new(height = 3.2, width = 7.5)\n\nmaster_layout <- \ngrid.layout(nrow = 2, ncol = 4, \n      widths = unit(c(0.1, 1, 0.1, 1), \"null\"),\n      heights = unit(c(1, 0.15), \"null\"))\ngrid.newpage()\npushViewport(viewport(layout = master_layout))\nprint(pisc_prey, vp = set_vp(1, 2))\nprint(benth_prey, vp = set_vp(1, 4))\ngrid.text(\n  expression( paste(\"Standard length (\", mm, \")\", sep = \"\") ), \n  vp = viewport(layout.pos.row = 2, layout.pos.col = 2:4), \n  gp = gpar(fontsize = 10), vjust = -0.25\n  )\ngrid.text(\n  \"Prey total length (mm)\",\n  vp = viewport(layout.pos.row = 1, layout.pos.col = 1), \n  gp = gpar(fontsize = 10), rot = 90, vjust = 1.7\n  )\ngrid.text(\n  \"a)\", vp = viewport(layout.pos.row = 1, layout.pos.col = 1), \n  gp = gpar(fontsize = 9), vjust = -13\n  )\ngrid.text(\n  \"b)\", vp = viewport(layout.pos.row = 1, layout.pos.col = 3), \n  gp = gpar(fontsize = 9), vjust = -13\n  )\n# Figure label\ngrid.text(\"Figure 6\", vp = viewport(layout.pos.row = 2, layout.pos.col = 1), \n    gp = gpar(fontsize = 9), hjust = -1, vjust = 1)\n\ndev.copy2eps(device = quartz, file = \"panel_plots/pred_prey_SL_figure_label.eps\")\n\n",
			"file": "plots_for_ms_species_gape_widths.R",
			"file_size": 37235,
			"file_write_time": 130985937220000000,
			"settings":
			{
				"buffer_size": 28820,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "################################################################################\n############            Gape Size ~ Body Size Analysis              ############\n################################################################################\n\n# Count number of fish per each species in df = fish\nddply(fish, .(SpeciesCode), summarize, n = length(SpeciesCode))\n\n# Functional group level linear models:\nfg_gh <- groupwise_lm_gh(pento, pento$j_fg)\nfg_gw <- groupwise_lm_gw(pento, pento$j_fg)\nfg_ga <- groupwise_lm_ga(pento, pento$j_fg)\n\nfg_list <- rbind(fg_gh, fg_gw, fg_ga)\n\nwrite.csv(fg_list, file = \"fg_list.csv\")\n\nzp_gh <- groupwise_lm_gh(zp, zp$Family)\nzp_gw <- groupwise_lm_gw(zp, zp$Family)\nzp_ga <- groupwise_lm_ga(zp, zp$Family)\n\nzp_list <- rbind(zp_gh, zp_gw, zp_ga)\n\nwrite.csv(zp_list, file = \"zp_fam_list.csv\")\n\n# Piscivore analysis:\n# Linear mixed effects models for Functional groups:\nlibrary(lme4)\nfm_p <- lmer(log(gh) ~ log(SL) + (1|SpeciesCode), p)\nfm_p\n\nfm_p2 <- lmer(log(gh) ~ log(SL) + (1|Family), p)\nfm_p2\n\ntest <- lm(log(gh) ~ log(SL), data = p)\nsummary(test)\n\nlm(log(gh) ~ log(SL), p)\n\n\nx <- lme(log(gw) ~ log(SL), data = zp, random = ~ 1 | SpeciesCode)\ny <- lme(log(gh) ~ log(SL), data = p, random = ~ 1 | Family)\n\nsummary(x)\nintervals(x)\nVarCorr(x)\n\n# All Functional groups:\nfg_gh <- groupwise_lm_gh(pento, pento$j_fg)\npspp_gw <- groupwise_lm_gw(p, p$SpeciesCode)\nfg_ga <- groupwise_lm_ga(pento, pento$j_fg)\n\nfg <- write_lme_groups(fg_gh, fg_gh$variable)\ns2 <- write_lme_groups(pspp_gw, pspp_gw$variable)\nfg3 <- write_lme_groups(fg_ga, fg_ga$variable)\n\nfg_names <- c(\"j_fg\", \"eqn\")\ncolnames(fg) <- fg_names\ncolnames(s2) <- snames\ncolnames(fg3) <- fg_names\n\npento2 <- pento\nlevels(pento2$j_fg)[levels(pento2$j_fg)==\"Pi\"] <- \"Piscivore\"\nlevels(pento2$j_fg)[levels(pento2$j_fg)==\"BI\"]   <- \"Benthic Invertivore\"\nlevels(pento2$j_fg)[levels(pento2$j_fg)==\"ZP\"] <- \"Zooplanktivore\"\nlevels(pento2$j_fg)[levels(pento2$j_fg)==\"He\"]   <- \"Herbivore\"\nlevels(pento2$j_fg)[levels(pento2$j_fg)==\"C\"]   <- \"Corallivore\"\n\nfg2 <- fg3\nlevels(fg2$j_fg)[levels(fg2$j_fg)==\"Pi\"] <- \"Piscivore\"\nlevels(fg2$j_fg)[levels(fg2$j_fg)==\"BI\"]   <- \"Benthic Invertivore\"\nlevels(fg2$j_fg)[levels(fg2$j_fg)==\"ZP\"] <- \"Zooplanktivore\"\nlevels(fg2$j_fg)[levels(fg2$j_fg)==\"He\"]   <- \"Herbivore\"\nlevels(fg2$j_fg)[levels(fg2$j_fg)==\"C\"]   <- \"Corallivore\"\n\nggplot(data=pento2, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  ylim(0, 11.5) +\n  geom_text(data=fg2, aes(x=4.8, y=10.5, label=eqn), size=6, parse=T) +\n  theme(strip.text.x = element_text(size=22)) +\n  facet_wrap(~ j_fg, ncol = 3)\n\n\n# Level: Functional group - Piscivores ####\n  \n\np1 <-\n  ggplot(data=p, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) + #, aes(colour=SpeciesCode)) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.2, y=4.5, label=write_lme_gen(p, p$gh)), parse=TRUE) +\n#  annotate(\"text\", x = 4.2, y = 4.3, label = \"-\", size = 9)\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n  #ggtitle(\"Vertical Gape\")\n\np2 <-\n  ggplot(data=p, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.2, y=4.5, label=write_lme_gen(p, p$gw)), parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n  #ggtitle(\"Horizontal Gape\")\n\np3 <-\n  ggplot(data=p, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.2, y=8.2, label=write_lme_gen(p, p$ga)), parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,1,1.3), \"cm\"))\n  #ggtitle(\"Gape Area\")\n\ngrid.arrange(p1, p2, p3)\n\n# Level: Family - Piscivores ####\n\npfam_gh <- groupwise_lm_gh(p, p$Family)\npfam_gw <- groupwise_lm_gw(p, p$Family)\npfam_ga <- groupwise_lm_ga(p, p$Family)\n\nplist <- rbind(pfam_gh, pfam_gw, pfam_ga)\nwrite.csv(plist, file = \"plist.csv\")\n\nf1 <- write_lme_groups(pfam_gh, pfam_gh$variable)\nf2 <- write_lme_groups(pfam_gw, pfam_gw$variable)\nf3 <- write_lme_groups(pfam_ga, pfam_ga$variable)\n\nfnames <- c(\"Family\", \"eqn\")\ncolnames(f1) <- fnames\ncolnames(f2) <- fnames\ncolnames(f3) <- fnames\n\nfam1 <-\n  ggplot(data=p, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f1, aes(x=4.8, y=5, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam2 <-\n  ggplot(data=p, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f2, aes(x=4.8, y=5.1, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam3 <-\n  ggplot(data=p, aes(x=log(SL), y=log(ga))) + #, colour=SpeciesCode)) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f3, aes(x=4.8, y=9.9, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,1,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\ngrid.arrange(fam1, fam2)\nfam3\ngrid.arrange(fam1, fam2, fam3)\n\n# Level: Species - Piscivores ####\npspp_gh <- groupwise_lm_gh(p, p$SpeciesCode)\npspp_gw <- groupwise_lm_gw(p, p$SpeciesCode)\npspp_ga <- groupwise_lm_ga(p, p$SpeciesCode)\n\ns1 <- write_lme_groups(pspp_gh, pspp_gh$variable)\ns2 <- write_lme_groups(pspp_gw, pspp_gw$variable)\ns3 <- write_lme_groups(pspp_ga, pspp_ga$variable)\n\nsnames <- c(\"SpeciesCode\", \"eqn\")\ncolnames(s1) <- snames\ncolnames(s2) <- snames\ncolnames(s3) <- snames\n\nspp1 <-\n  ggplot(data=p, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=4, drop=F) +\n  geom_smooth(method=lm) +\n  geom_text(data=s1, aes(x=4.85, y=4.8, label=eqn), size=3.5, parse=T) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n  facet_grid(. ~ cyl, labeller = label_both)\n\nspp2 <-\n  ggplot(data=p, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=4) +\n  geom_smooth(method=lm) +\n  ylim(c(1,5.3)) +\n  geom_text(data=s2, aes(x=4.85, y=5.1, label=eqn), size=3.5, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp3 <-\n  ggplot(data=p, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=4) +\n  geom_smooth(method=lm) +\n  ylim(c(1.9, 10.2)) +\n  geom_text(data=s3, aes(x=4.8, y=9.5, label=eqn), size = 3.5, parse=TRUE) + \n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,1,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp3\n\ngrid.arrange(spp1, spp2, spp3)\n\npdf(file = \"Gape_Body Plots/all_p_plots.pdf\", height = 13, width = 9)\ngrid.arrange(p1, p2, p3)\ngrid.arrange(fam1, fam2, fam3)\ngrid.arrange(spp1, spp2, spp3)\ndev.off()\n\n# groupwise_lm_gh(df, variable)\n# Functional Group level gape size ~ standard length relationships\nfg_lm_summary_GH <- groupwise_lm_gh(df=pento, variable=pento$j_fg)\nfg_lm_summary_GW <- groupwise_lm_gw(df=pento, variable=pento$j_fg)\nfg_lm_summary_GA <- groupwise_lm_ga(df=pento, variable=pento$j_fg)\n\n# Family level gape size ~ standard length relationships\nfam_lm_summary_GH <- groupwise_lm_gh(df=pento, variable=pento$Family)\nfam_lm_summary_GW <- groupwise_lm_gw(df=pento, variable=pento$Family)\nfam_lm_summary_GA <- groupwise_lm_ga(df=pento, variable=pento$Family)\n\n# Species level gape size ~ standard length relationships\nsp_lm_summary_GH <- groupwise_lm_gh(df=pento, variable=pento$SpeciesCode)\nsp_lm_summary_GW <- groupwise_lm_gw(df=pento, variable=pento$SpeciesCode)\nsp_lm_summary_GA <- groupwise_lm_ga(df=pento, variable=pento$SpeciesCode)\n\n\n# Benthic Invertivore analysis: ####\n# Level: Functional group - Benthic Invertivore ####\n\nb1 <-\n  ggplot(data=b, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.5, y=3.7, label=write_lme_gen(b, b$gh)), parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nb2 <-\n  ggplot(data=b, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.5, y=3.7, label=write_lme_gen(b, b$gw)), parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nb3 <-\n  ggplot(data=b, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.5, y=7.5, label=write_lme_gen(b, b$ga)), parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\ngrid.arrange(b1, b2, b3)\n\n# Level: Species - Benthic Invertivores ####\nbspp_gh <- groupwise_lm_gh(b, b$SpeciesCode)\nbspp_gw <- groupwise_lm_gw(b, b$SpeciesCode)\nbspp_ga <- groupwise_lm_ga(b, b$SpeciesCode)\n\ns1 <- write_lme_groups(bspp_gh, bspp_gh$variable)\ns2 <- write_lme_groups(bspp_gw, bspp_gw$variable)\ns3 <- write_lme_groups(bspp_ga, bspp_ga$variable)\n\nsnames <- c(\"SpeciesCode\", \"eqn\")\ncolnames(s1) <- snames\ncolnames(s2) <- snames\ncolnames(s3) <- snames\n\n\nspp1 <-\n  ggplot(data=b, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3, drop=F) +\n  geom_smooth(method=lm) +\n  geom_text(data=s1, aes(x=4.85, y=4.1, label=eqn), size=4, parse=T) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp2 <-\n  ggplot(data=b, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  #  ylim(c(1,5.3)) +\n  geom_text(data=s2, aes(x=4.85, y=3.9, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp3 <-\n  ggplot(data=b, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  #  ylim(c(1.9, 10.2)) +\n  geom_text(data=s3, aes(x=4.85, y=7.7, label=eqn), size=4, parse=TRUE) + \n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\ngrid.arrange(spp1, spp2, spp3)\n\npdf(file = \"all_b_plots.pdf\", height = 13, width = 9)\ngrid.arrange(b1, b2, b3)\ngrid.arrange(spp1, spp2, spp3)\ndev.off()\n\n\n# Zooplanktivore analysis: ####\n# Level: Functional group - Zooplanktivores ####\n\nzp1 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=3.5, y=3.2, label=write_lme_gen(zp, zp$gh)), parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nzp2 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=3.5, y=3.2, label=write_lme_gen(zp, zp$gw)), parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nzp3 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=3.5, y=6, label=write_lme_gen(zp, zp$ga)), parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\ngrid.arrange(zp1, zp2, zp3)\n\n# Level: Family - Zooplanktivores ####\n\nzpfam_gh <- groupwise_lm_gh(zp, zp$Family)\nzpfam_gw <- groupwise_lm_gw(zp, zp$Family)\nzpfam_ga <- groupwise_lm_ga(zp, zp$Family)\n\nzplist <- rbind(zpfam_gh, zpfam_gw, zpfam_ga)\n#write.csv(zplist, file = \"zplist.csv\")\n\nf1 <- write_lme_groups(zpfam_gh, zpfam_gh$variable)\nf2 <- write_lme_groups(zpfam_gw, zpfam_gw$variable)\nf3 <- write_lme_groups(zpfam_ga, zpfam_ga$variable)\n\nfnames <- c(\"Family\", \"eqn\")\ncolnames(f1) <- fnames\ncolnames(f2) <- fnames\ncolnames(f3) <- fnames\n\nfam1 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f1, aes(x=4.2, y=3.4, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam1\n\nfam2 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f2, aes(x=4.2, y=3.4, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam2\n\nfam3 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(ga))) + #, colour=SpeciesCode)) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f3, aes(x=4.2, y=6.4, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam3\n\ngrid.arrange(fam1, fam2, fam3)\n\n# Level: Species - Zooplanktivores ####\n\nzpspp_gh <- groupwise_lm_gh(zp, zp$SpeciesCode)\nzpspp_gw <- groupwise_lm_gw(zp, zp$SpeciesCode)\nzpspp_ga <- groupwise_lm_ga(zp, zp$SpeciesCode)\n\ns1 <- write_lme_groups(zpspp_gh, zpspp_gh$variable)\ns2 <- write_lme_groups(zpspp_gw, zpspp_gw$variable)\ns3 <- write_lme_groups(zpspp_ga, zpspp_ga$variable)\n\nsnames <- c(\"SpeciesCode\", \"eqn\")\ncolnames(s1) <- snames\ncolnames(s2) <- snames\ncolnames(s3) <- snames\n\nspp1 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3, drop=F) +\n  geom_smooth(method=lm) +\n  geom_text(data=s1, aes(x=4.2, y=3.3, label=eqn), size=4, parse=T) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp1\n\nspp2 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  geom_text(data=s2, aes(x=4.1, y=3.25, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp2\n\nspp3 <-\n  ggplot(data=zp, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  geom_text(data=s3, aes(x=4.1, y=6.4, label=eqn), size=4, parse=TRUE) + \n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp3\n\ngrid.arrange(spp1, spp2, spp3)\n\npdf(file = \"all_zp_plots.pdf\", height = 13, width = 9)\ngrid.arrange(zp1, zp2, zp3)\ngrid.arrange(fam1, fam2, fam3)\ngrid.arrange(spp1, spp2, spp3)\ndev.off()\n\n\n# Herbivore analysis: ####\n# Level: Functional group - Herbivore ####\n\nh1 <-\n  ggplot(data=h, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +  \n  geom_text(data=data.frame(), aes(x=4.4, y=3.8, label=write_lme_gen(h, h$gh)), parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nh2 <-\n  ggplot(data=h, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.4, y=3.4, label=write_lme_gen(h, h$gw)), parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nh3 <-\n  ggplot(data=h, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.4, y=6.7, label=write_lme_gen(h, h$ga)), parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\ngrid.arrange(h1, h2, h3)\n\n# Level: Family - Herbivores ####\nhfam_gh <- groupwise_lm_gh(h, h$Family)\nhfam_gw <- groupwise_lm_gw(h, h$Family)\nhfam_ga <- groupwise_lm_ga(h, h$Family)\n\nhlist <- rbind(hfam_gh, hfam_gw, hfam_ga)\nwrite.csv(hlist, file = \"hlist.csv\")\n\nf1 <- write_lme_groups(hfam_gh, hfam_gh$variable)\nf2 <- write_lme_groups(hfam_gw, hfam_gw$variable)\nf3 <- write_lme_groups(hfam_ga, hfam_ga$variable)\n\nfnames <- c(\"Family\", \"eqn\")\ncolnames(f1) <- fnames\ncolnames(f2) <- fnames\ncolnames(f3) <- fnames\n\n\nfam1 <-\n  ggplot(data=h, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f1, aes(x=5, y=4.2, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam2 <-\n  ggplot(data=h, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f2, aes(x=5, y=3.7, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nfam3 <-\n  ggplot(data=h, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20, aes(colour=SpeciesCode)) +\n  facet_wrap(~Family) +\n  geom_smooth(method=lm) +\n  geom_text(data=f3, aes(x=5, y=7.5, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\ngrid.arrange(fam1, fam2, fam3)\n\n# Level: Species - Herbivores ####\nhspp_gh <- groupwise_lm_gh(h, h$SpeciesCode)\nhspp_gw <- groupwise_lm_gw(h, h$SpeciesCode)\nhspp_ga <- groupwise_lm_ga(h, h$SpeciesCode)\n\ns1 <- write_lme_groups(hspp_gh, hspp_gh$variable)\ns2 <- write_lme_groups(hspp_gw, hspp_gw$variable)\ns3 <- write_lme_groups(hspp_ga, hspp_ga$variable)\n\nsnames <- c(\"SpeciesCode\", \"eqn\")\ncolnames(s1) <- snames\ncolnames(s2) <- snames\ncolnames(s3) <- snames\n\nspp1 <-\n  ggplot(data=h, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  geom_text(data=s1, aes(x=4.9, y=4.15, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp2 <-\n  ggplot(data=h, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  #  ylim(c(1,5.3)) +\n  geom_text(data=s2, aes(x=4.8, y=3.65, label=eqn), size=4, parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\nspp3 <-\n  ggplot(data=h, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  facet_wrap(~SpeciesCode, ncol=3) +\n  geom_smooth(method=lm) +\n  #  ylim(c(1.9, 10.2)) +\n  geom_text(data=s3, aes(x=4.8, y=7.45, label=eqn), size=4, parse=TRUE) + \n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\nfacet_grid(. ~ cyl, labeller = label_both)\n\ngrid.arrange(spp1, spp2, spp3)\n\npdf(file = \"all_h_plots.pdf\", height = 13, width = 9)\ngrid.arrange(h1, h2, h3)\ngrid.arrange(fam1, fam2, fam3)\ngrid.arrange(spp1, spp2, spp3)\ndev.off()\n\n\n# Corallivore analysis: ####\n# Level: Functional Group (only 1 species) - Corallivore ####\nc1 <-\n  ggplot(data=c, aes(x=log(SL), y=log(gh))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  #geom_text(aes(position=\"jitter\", label=SpecimenID, size=2)) +\n  geom_text(data=data.frame(), aes(x=4.6, y=2.8, label=write_lme_gen(c, c$gh)), parse=TRUE) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(vertical gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nc2 <-\n  ggplot(data=c, aes(x=log(SL), y=log(gw))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.6, y=2.8, label=write_lme_gen(c, c$gw)), parse=TRUE) +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  theme(axis.title.x = element_blank()) +\n  ylab(\"log(horizontal gape, mm)\") +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\nc3 <-\n  ggplot(data=c, aes(x=log(SL), y=log(ga))) +\n  geom_point(shape=20) +\n  geom_smooth(method=lm) +\n  geom_text(data=data.frame(), aes(x=4.6, y=5.35, label=write_lme_gen(c, c$ga)), parse=TRUE) +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.06, vjust= -1)) +\n  xlab(\"log(standard length, mm)\") +\n  ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))\n\ngrid.arrange(c1, c2, c3)\n\npdf(file = \"all_c_plots.pdf\", height = 13, width = 9)\ngrid.arrange(c1, c2, c3)\ndev.off()\n\n\n\n################################################################################\n############            Gape Size ~ Body Size Isometry              ############\n################################################################################\n\n# Linear regression values for all species in the functional groups: \n# Pi, BI, ZP, He, C ####\n\nwrite.csv(groupwise_lm_gh(pento, pento$SpeciesCode),\n            file = \"5_fg_gh_lm.csv\")\n\nwrite.csv(groupwise_lm_gw(pento, pento$SpeciesCode),\n          file = \"5_fg_gw_lm.csv\")\n\nwrite.csv(groupwise_lm_ga(pento, pento$SpeciesCode),\n          file = \"5_fg_ga_lm.csv\")\n\n\n\nx <- groupwise_lm_gh(p, p$Family)\nx\n\ny <- groupwise_lm_gw(p, p$Family)\ny\n\nz <- groupwise_lm_ga(p, p$Family)\nz\n\n# finding some averages for each functional group:\nddply(pento, ~ j_fg, summarise, mean = mean(gh_ratio), sd = sd(gh_ratio))\nddply(pento, ~ j_fg, summarise, mean = mean(gw_ratio), sd = sd(gw_ratio))\n\nddply(pento, ~ Family, summarise, mean = mean(gh_ratio), sd = sd(gh_ratio))\nddply(pento, ~ Family, summarise, mean = mean(gw_ratio), sd = sd(gh_ratio))\n\nddply(pento, ~ SpeciesCode, summarise, mean = mean(gh_ratio), sd = sd(gh_ratio))\nddply(pento, ~ SpeciesCode, summarise, mean = mean(gw_ratio), sd = sd(gw_ratio))\n\n\n# Setting levels to functional groups: \nplot(gh_ratio~j_fg, pento)\nplot(gh_ratio~Family, pento)\n\n\ngh <- ggplot(pento, aes(x=SpeciesCode, y=gh_ratio, fill=j_fg)) +\n  geom_boxplot() +\n  xlab(\"Species\") +\n  ylab(\"Relative vertical gape\") +\n  theme(axis.text.x = element_text(angle=45, colour=\"black\", vjust=0.5)) +\n  theme(axis.text.y = element_text(colour=\"black\")) +\n  theme(axis.title.y = element_text(vjust = 0.3)) +\n  scale_fill_discrete(name = \"  FG\")\n\ngw <- ggplot(pento, aes(x=SpeciesCode, y=gw_ratio, fill=j_fg)) +\n  geom_boxplot() +\n  xlab(\"Species\") +\n  ylab(\"Relative horizontal gape\") +\n  theme(axis.text.x = element_text(angle=45, colour=\"black\", vjust=0.5)) +\n  theme(axis.text.y = element_text(colour=\"black\")) +\n  theme(axis.title.y = element_text(vjust = 0.3)) +\n  scale_fill_discrete(name = \"  FG\")\n\npdf(file = \"pento_boxplots.pdf\", width=9, height=6)\ngh\ngw\ndev.off()\n\nggplot(pento, aes(x=SpeciesCode, y=gw_ratio, fill=j_fg)) +\n  geom_boxplot() +\n  xlab(\"Species\") +\n  ylab(\"Average Relative Horizontal Gape\") +\n  theme(axis.text.x = element_text(angle=45, colour=\"black\", vjust=0.5)) +\n  theme(axis.text.y = element_text(colour=\"black\")) +\n  theme(axis.title.y = element_text(vjust = 0.3))\n\nshapes <- c(1, 4, 17, 8, 18, 7, 2)\n\ngh <- ggplot(zp, aes(x=SL, y=gh_ratio, shape=SpeciesCode, colour=SpeciesCode)) +\n  geom_point(size=2) +\n#  scale_shape_manual(values=shapes) +\n  ylab(\"Vertical gape (mm) / Standard length (mm)\") +\n  theme(axis.title.x = element_blank()) +\n  xlim(0, 600) +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.5,1,0.1,1.3), \"cm\")) +\n  geom_smooth(method=lm, fill=NA, size=1) \ngh\n\ngw <- ggplot(zp, aes(x=SL, y=gw_ratio, shape=SpeciesCode, colour=SpeciesCode)) +\n  geom_point(size=2) +\n#  scale_shape_manual(values=shapes) +\n  ylab(\"Horizontal gape (mm) / Standard length (mm)\") +\n  xlab(\"Standard length (mm)\") +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.1,1,0.5,1.3), \"cm\")) +\n  geom_smooth(method=lm, fill=NA, size=1)\ngw\n\npdf(file = \"Ratio plots/zp_ratio_sl.pdf\", width=8, height=9)\ngrid.arrange(gh, gw)\ndev.off()\n\n\n\n################################################################################\n############            Predator ~ Prey Size Analysis               ############\n################################################################################\n\n# Actually doing the quantile regression:\n# Have used the 10th and 90th percentiles because of sample size\n# and following the general guidelines of n > (10/q) given in \n# Scharf et al, 1998 - Ecology\n\nlibrary('quantreg')\nlibrary('ggplot2')\nlibrary(gridExtra)\nlibrary(plyr)\n\n# Count number of fish per each species in df = preyX\nddply(prey5, .(SpeciesCode), summarize, n = length(SpeciesCode))\nddply(prey6, .(SpeciesCode), summarize, n = length(SpeciesCode))\n\n# prey3 is a data.frame with just Pi, BI, ZP.\nsl <- ggplot(prey2, aes(x = sl, y = psize)) +\n  geom_point(aes(colour = ptype, shape = ptype)) +\n  xlab(\"Predator standard length (mm)\") +\n  ylab(\"Prey minimum total length (mm)\") +\n  scale_colour_discrete(name = \"Prey\\nType\") +\n  scale_shape_discrete(name = \"Prey\\nType\") +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\")) +\n  #geom_smooth(method=lm, fill=NA, size=1)\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\")\n\n\ngh <- ggplot(na.omit(prey2), aes(x = gh, y = psize)) +\n  geom_point(aes(colour = ptype)) +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\")\n\ngrid.arrange(sl, gh)\n\ndf.n <- ddply(.data=prey3, .(fg), summarize, n=paste(\"n ==\", length(fg)))\n\nsl <- ggplot(prey3, aes(x = sl, y = psize)) +\n  geom_point(aes(colour = ptype, shape = ptype)) +\n  geom_text(data = df.n, aes( x= 200, y = 230, label = n), parse = TRUE) +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  xlab(\"Predator standard length (mm)\") +\n  scale_colour_discrete(name = \"Prey type\") +\n  scale_shape_discrete(name = \"Prey type\") +\n  ggtitle(\"a)\") +\n  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\")) +\n  #annotation_custom(\n   # grob = textGrob(label = c(\"a)\", \"b)\"), hjust = 7, vjust = -7,  gp = gpar(cex=1.5)),\n    #ymin = -10,\n    #ymax = 300,\n    #xmin = -10, \n    #xmax = 600) +\n  facet_wrap(~ fg) #, scales=\"free_x\")\n\nsl\n\n\ndf.n <- ddply(.data=na.omit(prey3), .(fg), summarize, n=paste(\"n ==\", length(fg)))\n\ngh <- ggplot(na.omit(prey3), aes(x = gh, y = psize)) +\n  geom_point(aes(colour = ptype, shape = ptype)) +\n  geom_text(data = df.n, aes( x= 30, y = 230, label = n), parse = TRUE) +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  xlab(\"Predator vertical gape (mm)\") +\n  scale_colour_discrete(name = \"Prey type\") +\n  scale_shape_discrete(name = \"Prey type\") +\n  ggtitle(\"b)\") +\n  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\")) +\n  facet_wrap(~ fg)\ngh\n\ngw <- ggplot(na.omit(prey3), aes(x = gw, y = psize)) +\n  geom_point(aes(colour = ptype, shape = ptype)) +\n  geom_text(data = df.n, aes(x= 70, y = 220, label = n), parse = TRUE) +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  xlab(\"Predator horizontal gape (mm)\") +\n  scale_colour_discrete(name = \"Prey type\") +\n  scale_shape_discrete(name = \"Prey type\") +\n  ggtitle(\"c)\") +\n  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\")) +\n  facet_wrap(~ fg, ncol=2)\n\np_prey <- subset(prey3, fg == \"Pi\")\ndf.n <- ddply(.data=na.omit(p_prey), .(fg), summarize, n=paste(\"n ==\", length(fg)))\ndf.n <- ddply(.data=na.omit(prey3), .(fg), summarize, n=paste(\"n ==\", length(fg)))\n\nfgs <- list('Pi' = \"Piscivore\",\n            'BI' = \"Benthic Invertivore\")\n\nfg_labeller <- function(variable,value){\n  return(fgs[value])\n}\n\nga <- ggplot(na.omit(prey3), aes(x = pi*((gh/2)+ (gw/2)), y = psize)) +\n  geom_point(aes(colour = ptype, shape = ptype), size = 4) +\n  geom_text(data = df.n, aes(x= 125, y = 220, label = n), size = 10, parse = TRUE) +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  xlab(expression(paste(\"Predator gape area \", \"(\", mm^2, \")\", sep= \"\"))) +\n  scale_colour_discrete(name = \"Prey type\") +\n  scale_shape_discrete(name = \"Prey type\") +\n  theme(axis.title.y = element_text(size = 30, vjust = 0.07)) +\n  theme(axis.title.x = element_text(size = 30, vjust = 0.05)) +\n  theme(legend.text = element_text(size = 28)) +\n  theme(legend.key.height = unit(1.5, \"line\")) +\n  theme(legend.title = element_text(size = 26)) +\n  theme(strip.text.x = element_text(size = 34)) +\n  theme(legend.position = c(0.9, 0.5)) +\n  theme(legend.background = element_rect(fill = \"#FFFFFFaa\", colour = 'NA')) +\n  theme(axis.text.x = element_text(size = 28)) +\n  theme(axis.text.y = element_text(size = 28)) +\n#  ggtitle(\"b)\") +\n#  theme(plot.title = element_text(hjust= -0.09, vjust= -1)) +\n  theme(plot.margin = unit(c(0.5,1,0.5,1.3), \"cm\"))  +\n  facet_grid(. ~ fg, labeller=fg_labeller)\n\npdf(file = \"Pred_prey_plots/psize_ga_sl_fg.pdf\", width = 8.5, height = 8.5)\ngrid.arrange(sl, ga) #, gw)\ndev.off()\n\ngrid.arrange(gh, gw, ga)\n\ndf.n <- ddply(.data=prey5, .(fg), summarize, n=paste(\"n ==\", length(fg)))\n\nggplot(na.omit(prey3), aes(x = sl, y = psize)) +\n  geom_point(aes(colour = SpeciesCode)) +\n  geom_text(data = df.n, aes( x= 200, y = 200, label = n), parse = TRUE) +\n  #geom_smooth(method = \"lm\") +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.90), method = \"rq\") +\n  facet_wrap(~ fg)\n\n# Graphs for manuscript:\n# Graph of just piscivores stomach contents:\nggplot(na.omit(prey5), aes(x = pi*((gh/2)+ (gw/2)), y = psize)) +\n  geom_point(aes(shape = ptype)) +\n  scale_shape_manual(values=c(1, 19)) +\n  #geom_text(data = df.n, aes(x = 100, y = 200, label = n), parse = TRUE) +\n  theme_bw() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.line = element_line(color = 'black')) +\n  #geom_smooth(method = \"lm\") +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.50, 0.90), method = \"rq\", \n                colour = \"black\") +\n  theme(axis.ticks.length = unit(-0.2, \"cm\")) +\n  theme(axis.ticks.margin = unit(0.3, \"cm\")) +\n  xlab(expression(paste(\"gape area (\", mm^2, \")\", sep= \"\"))) +\n  ylab(\"prey total length (mm)\")\n\n# Graph of benthic invertivore and piscivores:\ndf.n <- ddply(.data=prey5, .(fg), summarize, n=paste(\"n ==\", length(fg)))\npisc_prey <-\nggplot(na.omit(prey5), aes(x = pi*((gh/2)+ (gw/2)), y = psize)) +\n  geom_point(aes(shape = ptype)) +\n  scale_shape_manual(values=c(1, 19)) +\n  geom_text(data = df.n, aes(x = 90, y = 230, label = n), parse = TRUE, \n            size = 3, hjust = 0) +\n  theme_bw() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.line = element_line(color = 'black')) +\n  theme(legend.position = \"none\") +\n  theme(axis.title = element_blank()) +\n  #geom_smooth(method = \"lm\") +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.50, 0.90), method = \"rq\", \n                colour = \"black\") +\n  theme(axis.ticks.length = unit(-0.2, \"cm\")) +\n  theme(axis.ticks.margin = unit(0.3, \"cm\")) +\n  xlab(expression(paste(\"gape area (\", mm^2, \")\", sep= \"\"))) +\n  ylab(\"prey total length (mm)\")\n\ndf.n <- ddply(.data=prey6, .(fg), summarize, n=paste(\"n ==\", length(fg)))\nbenth_prey <-\nggplot(na.omit(prey6), aes(x = pi*((gh/2)+ (gw/2)), y = psize)) +\n  geom_point(aes(shape = ptype)) +\n  geom_point(aes(x = 293.7, y = 258), alpha = 0.0) +\n  scale_shape_manual(values=c(1, 19)) +\n  geom_text(data = df.n, aes(x = 50, y = 230, label = n), parse = TRUE, \n            size = 3, hjust = 0) +\n  theme_bw() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.line = element_line(color = 'black')) +\n  theme(legend.position = \"none\") +\n  theme(axis.title = element_blank()) +\n  #geom_smooth(method = \"lm\") +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.50, 0.90), method = \"rq\", \n                colour = \"black\") +\n  theme(axis.ticks.length = unit(-0.2, \"cm\")) +\n  theme(axis.ticks.margin = unit(0.3, \"cm\")) +\n  xlab(expression(paste(\"gape area (\", mm^2, \")\", sep= \"\"))) #+\n  #ylab(\"prey total length (mm)\")\n\n\nmaster_layout <- \ngrid.layout(nrow = 2, ncol = 3, \n      widths = unit(c(0.1, 1, 1), \"null\"),\n      heights = unit(c(1, 0.1), \"null\"))\ngrid.newpage()\npushViewport(viewport(layout = master_layout))\nprint(pisc_prey, vp = set_vp(1, 2))\nprint(benth_prey, vp = set_vp(1, 3))\ngrid.text(\n  expression( paste(\"Gape area (\", mm^2, \")\", sep = \"\") ), \n  vp = viewport(layout.pos.row = 2, layout.pos.col = 2:3), \n  gp = gpar(fontsize = 10), vjust = -0.25\n  )\ngrid.text(\n  \"Prey total length (mm)\",\n  vp = viewport(layout.pos.row = 1, layout.pos.col = 1), \n  gp = gpar(fontsize = 10), rot = 90, vjust = 2\n  )\n\ngrid.text(\n  \"a)\", vp = viewport(layout.pos.row = 1, layout.pos.col = 1), \n  gp = gpar(fontsize = 9), vjust = -7\n  )\ngrid.text(\n  \"b)\", vp = viewport(layout.pos.row = 4, layout.pos.col = 1), \n  gp = gpar(fontsize = 9), vjust = -7\n  )\n\ndev.copy2eps(device = quartz, file = \"panel_plots/pred_prey_size.eps\")\n\n\n\n\nbi_qr <- rq(data = subset(prey3, prey3$fg == 'BI'), psize ~ sl, \n            tau = c(0.10, 0.50, 0.90))\nbi_90 <- rq(data = subset(prey3, prey3$fg =='BI'), psize~gh, tau = 0.90)\nbi_50 <- rq(data = subset(prey3, prey3$fg =='BI'), psize~gh, tau = 0.50)\nbi_10 <- rq(data = subset(prey3, prey3$fg =='BI'), psize~gh, tau = 0.10)\n\np_90 <- rq(data = subset(prey3, prey3$fg =='Pi'), psize~sl, tau = 0.90)\np_50 <- rq(data = subset(prey3, prey3$fg =='Pi'), psize~sl, tau = 0.50)\np_10 <- rq(data = subset(prey3, prey3$fg =='Pi'), psize~sl, tau = 0.10)\n\n\np <- subset(prey3, prey3$fg == 'Pi')\nb <- subset(prey3, prey3$fg == 'BI')\n\np <- subset(prey_gh, prey_gh$fg == 'Pi')\nb <- subset(prey_gh, prey_gh$fg == 'BI')\n\nsummary(bi_qr, se = \"rank\")\nbi_qr[[3]]\n\n# QR for species with most pred-prey sizes to see if one species in particular \n# is responsible for eating certain prey items or prey sizes:\npento_extra <- c(\"CA.MELA\", \"CA.ORTH\", \"AP.FURC\", \"AP.VIRE\", \"LU.BOHA\", \n                 \"LU.KASM\", \"CE.ARGU\", \"CE.UROD\", \"EP.HEXA\", \"EP.MACU\",\n                 \"EP.SPIL\", \"EP.TAUV\", \"VA.LOUT\", \"PA.ARCA\", \"MO.GRAN\",\n                 \"PA.INSU\", \"AC.NIGR\", \"AC.OLIV\", \"CE.FLAV\", \"CH.SORD\",\n                 \"SC.FREN\", \"SC.RUBR\", \"CA.TERE\", \"PT.TILE\", \"CH.VAND\", \n                 \"PS.BART\", \"PS.DISP\", \"PS.OLIV\", \"CH.ORNA\")\n\nprey3$SpeciesCode <- factor(prey3$SpeciesCode, levels=pento_extra)\nsix <- prey3[prey3$SpeciesCode %in% c('AP.FURC', 'CA.MELA', 'CE.ARGU', \n                                      'CE.UROD', 'LU.BOHA', 'VA.LOUT'), ]\nsix$SpeciesCode <- factor(six$SpeciesCode, levels = 'CA.MELA',\n                                                    'AP.FURC',\n                                                    'LU.BOHA',\n                                                    'CE.ARGU',\n                                                    'CE.UROD',\n                                                    'VA.LOUT')\n\ndf.n <- ddply(.data=six, .(SpeciesCode), summarize, n=paste(\"n ==\", length(SpeciesCode)))\nsl <- ggplot(six, aes(x = sl, y = psize)) +\n  geom_point(aes(colour = ptype), name = \"Prey Type\") +\n  geom_text(data = df.n, aes( x= 120, y = 230, label = n), parse = TRUE) +\n  #stat_quantile(geom = \"quantile\", quantiles = c(0.5), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  theme(axis.title.y = element_text(vjust = 0.3)) +\n  xlab(\"Predator standard length (mm)\") +\n  theme(axis.title.x = element_text(vjust = 0.1)) +\n  labs(title = \"a)\") +\n  theme(plot.title = element_text(hjust= -0.05, vjust= -1)) +\n  labs(colour = \"Prey Type\") +\n  facet_wrap(~ SpeciesCode) \nsl\n\ndf.n <- ddply(.data=na.omit(six), .(SpeciesCode), summarize, n=paste(\"n ==\", length(SpeciesCode)))\n\ngh <- ggplot(na.omit(six), aes(x = gh, y = psize)) +\n  geom_point(aes(colour = ptype)) +\n  geom_text(data = df.n, aes( x= 30, y = 230, label = n), parse = TRUE) +\n#  stat_quantile(geom = \"quantile\", quantiles = c(0.5), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  theme(axis.title.y = element_text(vjust = 0.3)) +\n  xlab(\"Predator vertical gape (mm)\") +\n  theme(axis.title.x = element_text(vjust = 0.1)) +\n  labs(title = \"b)\") +\n  theme(plot.title = element_text(hjust= -0.05, vjust= -1)) +\n  labs(colour = \"Prey Type\") +\n  facet_wrap(~ SpeciesCode,)\ngh\n\ngw <- ggplot(na.omit(six), aes(x = gw, y = psize)) +\n  geom_point(aes(colour = ptype)) +\n  geom_text(data = df.n, aes( x= 30, y = 230, label = n), parse = TRUE) +\n#  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  theme(axis.title.y = element_text(vjust = 0.3)) +\n  xlab(\"Predator horizontal gape (mm)\") +\n  theme(axis.title.x = element_text(vjust = 0.1)) +\n  labs(title = \"c)\") +\n  theme(plot.title = element_text(hjust= -0.05, vjust= -1)) +\n  labs(colour = \"Prey Type\") +\n  facet_wrap(~ SpeciesCode)\ngw\n\nga <- ggplot(na.omit(six), aes(x = pi*(gh/2 + gw/2), y = psize)) +\n  geom_point(aes(colour = ptype)) +\n  geom_text(data = df.n, aes( x= 120, y = 230, label = n), parse = TRUE) +\n  #  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.5, 0.90), method = \"rq\") +\n  ylab(\"Prey total length (mm)\") +\n  theme(axis.title.y = element_text(vjust = 0.3)) +\n  xlab(expression(paste(\"Predator gape area \", \"(\", mm^2, \")\", sep= \"\"))) +\n  theme(axis.title.x = element_text(vjust = 0.1)) +\n  labs(title = \"b)\") +\n  theme(plot.title = element_text(hjust= -0.05, vjust= -1)) +\n  labs(colour = \"Prey Type\") +\n  facet_wrap(~ SpeciesCode)\nga\n\npdf(file = \"Pred_prey_plots/psize_six_ga_sl_fg.pdf\", width = 8.5, height = 10)\ngrid.arrange(sl, ga) #, gw)\ndev.off()\n\ndf.n <- ddply(.data=prey3, .(fg), summarize, n=paste(\"n ==\", length(fg)))\n\nggplot(na.omit(prey3), aes(x = sl, y = psize)) +\n  geom_point(aes(colour = species)) +\n  geom_text(data = df.n, aes( x= 200, y = 200, label = n), parse = TRUE) +\n  geom_smooth(method = \"lm\") +\n  stat_quantile(geom = \"quantile\", quantiles = c(0.10, 0.90), method = \"rq\") +\n  facet_wrap(~ fg)\n\n\n# Counting prey frequencies for Pi and BI species used in pred-prey analysis\n# (in honours thesis) ####\n\ncolnames(myspp)\np <- subset(myspp, fg == 'Pi')\ncnt_p <- length(p$SpeciesCode)\n\np_stuff <- subset(p, (invert != 0 | fish != 0))\n\np_empty <- subset(p, (invert == 0 & fish == 0))\ncnt_pe <- length(p_empty$SpeciesCode)\n\np_invert <- subset(p, (invert == 1 & fish == 0))\ncnt_pi <- length(p_invert$SpeciesCode)\n\np_fish <- subset(p, (invert == 0 & fish == 1))\ncnt_pf <- length(p_fish$SpeciesCode)\n\np_both <- subset(p, (invert == 1 & fish ==1))\ncnt_pb <- length(p_both$SpeciesCode)\n\np_mush <- subset(p, (invert == 2 | fish == 2))\ncnt_mush <- length(p_mush$SpeciesCode)\n\nddply(p_invert, .(p_invert$SpeciesCode), function(x) {length(x$SpeciesCode)})\n\n# total individual benthic invertivores:\ncnt_p\n# all prey combinations add up to total Pi individs :D\ncnt_pe +\ncnt_pi +\ncnt_pf +\ncnt_pb +\ncnt_mush\n\n# Benthic Invertivores:\nb <- subset(myspp, fg == 'BI')\ncnt_b <- length(b$SpeciesCode)\n\nb_empty <- subset(b, (invert == 0 & fish == 0))\ncnt_be <- length(b_empty$SpeciesCode)\n\nb_invert <- subset(b, (invert == 1 & fish == 0))\ncnt_bi <- length(b_invert$SpeciesCode)\n\nb_fish <- subset(b, (invert == 0 & fish == 1))\ncnt_bf <- length(b_fish$SpeciesCode)\n\nb_both <- subset(b, (invert == 1 & fish ==1))\ncnt_bb <- length(b_both$SpeciesCode)\n\nb_mush <- subset(b, (invert == 2 | fish == 2))\ncnt_mush <- length(b_mush$SpeciesCode)\n\n# total individual benthic invertivores:\ncnt_b \n# all prey combinations add up to total BI individs :D\ncnt_be +\ncnt_bi +\ncnt_bf + \ncnt_bb +\ncnt_mush\n\n# how many fish had more than one prey item in their stomach?\np <- subset(prey3, fg == 'Pi')\nlength(which(duplicated(p$specimen)) == TRUE)\nlength(unique(p$specimen))\n\nb <- subset(prey3, fg == 'BI')\nlength(which(duplicated(b$specimen)) == TRUE)\nlength(unique(b$specimen))\n\ncount_spp(p)\ncount_spp(b)\n\n# Displaying these counts as a graph: ####\n# First, setting up dataframe so that presence/absence of prey types are a\n# single set of factors:\n\nmyspp$stomach <- with(myspp,\n                    ifelse((invert == 0 & fish == 0), 'E',\n                          ifelse((invert == 0 & fish == 1), 'F',\n                                 ifelse((invert == 1 & fish == 0), 'I',\n                                        ifelse((invert == 1 & fish == 1), 'F + I', 'U')\n                                        )\n                                 )\n                          )\n                      )\n\nmyspp$stomach <- as.factor(myspp$stomach)\nmyspp$stomach <- factor(myspp$stomach, levels = c('E', 'F', 'I', 'F + I', 'U'))\n\np <- subset(myspp, fg == 'Pi')\nb <- subset(myspp, fg == 'BI')\n\ndf.n <- ddply(.data=p, .(SpeciesCode), summarize, n=paste(\"n ==\", length(SpeciesCode)))\n\nggplot(data=p, aes(stomach, fill=SpeciesCode)) +\n  geom_bar() +\n  geom_text(data = df.n, aes(x = 3, y = 90, label = n), parse = TRUE) +\n  facet_wrap(~ SpeciesCode)\n\n# for plotting the most commmonly sampled species: CE.ARGU, CE.UROD, LU.BOHA: \ntrio <- p[p$SpeciesCode %in% c(\"CE.ARGU\", \"CE.UROD\", \"LU.BOHA\"), ]\n\ndf.n <- ddply(.data=trio, .(SpeciesCode), summarize, n=paste(\"n ==\", length(SpeciesCode)))\n\ntrio_plot <- ggplot(data=trio, aes(stomach, fill=SpeciesCode)) +\n  geom_bar() +\n  geom_text(data = df.n, aes(x = 4.5, y = 90, label = n), parse = TRUE) +\n  xlab(\"Stomach contents\") +\n  ylab(\"Count\") +\n  theme(axis.title.x = element_text(vjust = 0.1)) +\n#  theme(axis.text.x = element_text(angle = 30, vjust = 0.7)) +\n  facet_wrap(~ SpeciesCode)\n\npdf(file = \"Pred_prey_plots/trio_gut_contents_barchart.pdf\", width = 9, height = 4)\ntrio_plot\ndev.off()\n\n\n\n\n################################################################################\n############        Overall Predator Counts for Thesis Table        ############\n################################################################################\n\n\n# Size ranges for each species in pento: ####\npento$j_fg <- factor(pento$j_fg, levels=c('Pi', 'BI', 'He', 'ZP', 'C'))\nspp_list <- unique(pento$SpeciesCode)\nm <- matrix(data = NA, nrow = 0, ncol = 4)\n\n# populating matrix with min and max sizes for each pento spp\nfor (i in unique(pento$SpeciesCode)) {\n  min <- min(fish[which(fish$SpeciesCode == i), 13])\n  max <- max(fish[which(fish$SpeciesCode == i), 13])\n  fg  <- unique(fish[which(fish$SpeciesCode == i), 4])\n  m   <- rbind(m, c(as.character(i), as.character(fg), \n                    as.character(min), as.character(max)))\n}\n\n# getting this matrix setup for plotting\ndf <- as.data.frame(m)\ncolnames(df) <- c(\"SpeciesCode\", \"fg\", \"min\", \"max\")\ndf$min <- as.numeric(as.character(df$min))\ndf$max <- as.numeric(as.character(df$max))\n#df$SpeciesCode <- factor(df$SpeciesCode, levels = pento_order)\n#df$SpeciesCode <- factor(df$SpeciesCode, levels = rev(levels(df$SpeciesCode)))\n#df$y <- as.numeric(seq(1:23)) # set y after order has been set\ndf <- merge(df, maxL)\n\n# Size ranges of all species included in qr for pred-prey size ####\n# list of EXTRA species\nextra_spp <- c(\"AP.VIRE\", \"CA.ORTH\", \"EP.HEXA\", \"EP.MACU\", \"EP.SPIL\", \"EP.TAUV\")\nmax_len_e <- c(750, 1120, 275, 605, 350, 750)\nlen_e <- rep(\"TL\", 6)\n\nmaxLe <- data.frame(SpeciesCode=extra_spp, maxL=max_len_e, length=len_e)\n# populating matrix with min and max sizes for each of the 6 extra spp\ne <- matrix(data = NA, nrow = 0, ncol = 4)\nfor (i in extra_spp) {\n  min <- min(prey3[which(prey3$SpeciesCode == i), 5])\n  max <- max(prey3[which(prey3$SpeciesCode == i), 5])\n  fg  <- unique(prey3[which(prey3$SpeciesCode == i), 4])\n  e   <- rbind(e, c(as.character(i), as.character(fg), \n                    as.character(min), as.character(max)))\n}\n\n# getting this matrix setup for plotting\ne <- as.data.frame(e)\ncolnames(e) <- c(\"SpeciesCode\", \"fg\", \"min\", \"max\")\ne$min <- as.numeric(as.character(e$min))\ne$max <- as.numeric(as.character(e$max))\ne$SpeciesCode <- as.character(e$SpeciesCode)\ne <- merge(e, maxLe)\n\n# Combining original species and extra (pred-prey) species for the \n# body size range plots. \n\npento_extra <- c(\"CA.MELA\", \"CA.ORTH\", \"AP.FURC\", \"AP.VIRE\", \"LU.BOHA\", \n                 \"LU.KASM\", \"CE.ARGU\", \"CE.UROD\", \"EP.HEXA\", \"EP.MACU\",\n                 \"EP.SPIL\", \"EP.TAUV\", \"VA.LOUT\", \"PA.ARCA\", \"MO.GRAN\",\n                 \"PA.INSU\", \"AC.NIGR\", \"AC.OLIV\", \"CE.FLAV\", \"CH.SORD\",\n                 \"SC.FREN\", \"SC.RUBR\", \"CA.TERE\", \"PT.TILE\", \"CH.VAND\", \n                 \"PS.BART\", \"PS.DISP\", \"PS.OLIV\", \"CH.ORNA\")\n\n# Combined original + extra species data frame: \ndf <- rbind(df, e)\ndf$SpeciesCode <- factor(df$SpeciesCode, levels = pento_extra)\ndf$SpeciesCode <- factor(df$SpeciesCode, levels = rev(levels(df$SpeciesCode)))\n\nspp_order <- df[with(df, order(SpeciesCode)),]\nspp_order$y <- as.numeric(seq(1:29))\nspp_order$fg <- factor(spp_order$fg, levels=c('Pi', 'BI', 'He', 'ZP', 'C'))\n\n# max size of fish we measured are this % of max body size sampled:\nddply(spp_order, .(SpeciesCode), function(x) {(x$max/x$maxL)})\n\n# custom colours with piscivores blue, herbivores green:\n#\"#F8766D\" \"#A3A500\" \"#00BF7D\" \"#00B0F6\" \"#E76BF3\"\ncc <- c(\"#00B0F6\", \"#F8766D\", \"#00BF7D\", \"#E76BF3\", \"#A3A500\")\n\n#     red        yellow     green     blue     purple\n#[1] \"#F8766D\" \"#A3A500\" \"#00BF7D\" \"#00B0F6\" \"#E76BF3\"\n\nmin_spp <- df[with(df, order(min)), ]\nmin_spp$y <- as.numeric(seq(1:29))\nmin_spp$fg <- factor(min_spp$fg, levels=c('Pi', 'BI', 'He', 'ZP', 'C'))\n\nmax_spp <- df[with(df, order(max)), ]\nmax_spp$y <- as.numeric(seq(1:22))\n\n\nmin <- ggplot(data=min_spp, aes(x=min, y=y, colour=fg)) +\n  geom_segment(aes(xend=max, yend=y), lineend=\"round\", size=0.8) +\n  geom_segment(aes(x=max, xend=maxL, y=y, yend=y), linetype='dotted', \n               size=0.6, colour=\"black\") +\n  geom_point(aes(x=max, y=y), size=5, shape='|') +\n  geom_point(aes(x=min, y=y), size=5, shape='|') +\n  geom_point(aes(x=maxL, y=y), size=5, shape='|', colour=\"black\") +\n  geom_point(data = data.frame(), aes(x=(255 + c(750, 1120, 750, 605, 330, 275)), \n                                      y=c(29.2, 28.2, 27.2, 26.2, 24.2, 21.2)), \n             shape = '*', size=6) +\n  scale_colour_manual(values=cc) +\n  xlim(-5, 1400) +\n  xlab(\"Sampled body size range (mm)\") +\n  theme(axis.title.y=element_blank()) +\n  theme(axis.ticks.y = element_blank(), axis.text.y=element_blank()) +\n  geom_text(data=min_spp, aes(x=(maxL + 140), y=y, label=SpeciesCode)) +\n  theme(plot.margin= unit(c(1, 0.3, 0.5, 0.4), \"lines\")) +\n  labs(title = \"b)\") +\n  theme(plot.title = element_text(hjust= -0.04, vjust= -1)) \n#min\n\nspp <- ggplot(data = spp_order, aes(x=min, y=y, colour = fg)) +\n  geom_segment(aes(xend=max, yend = y), lineend = \"round\", size=0.8) +\n  geom_segment(aes(x=max, xend=maxL, y=y, yend=y), linetype='dotted', \n               size=0.6, colour=\"black\") +\n  geom_point(aes(x=max, y=y), size=5, shape='|') + \n  geom_point(aes(x=min, y=y), size=5, shape='|') +\n  geom_point(aes(x=maxL, y=y), size=5, shape='|', colour=\"black\") +\n  geom_point(data = data.frame(), aes(x=(255 + c(1120, 750, 275, 605, 330, 750)), \n                                      y=c(28.2, 26.2, 21.2, 20.2, 19.2, 18.2)), \n             shape = '*', size=6) +\n  scale_colour_manual(name=\"  FG\",\n                      values=cc) +\n  xlim(-5, 1400) +\n  xlab(\"Sampled body size range (mm)\") +\n  theme(axis.title.y=element_blank()) +\n  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +\n  geom_text(data=spp_order, aes(x=(maxL + 140), y=y, label=SpeciesCode)) +\n  theme(plot.margin= unit(c(1, 0.4, 0.5, 0.5), \"lines\")) +\n  labs(title = \"a)\") +\n  theme(plot.title = element_text(hjust= -0.04, vjust= -1)) \nspp\n\nlegend<-extract_legend(spp)\n\ngrid.arrange(spp + theme(legend.position = \"none\"), \n             min + theme(legend.position = \"none\"),\n             legend, widths=c(5,5,0.8), nrow=1)\n\n\n# Size ranges of all species included in qr for pred-prey size ####\n# list of extra species\nextra_spp <- c(\"AP.VIRE\", \"CA.ORTH\", \"EP.HEXA\", \"EP.MACU\", \"EP.SPIL\", \"EP.TAUV\")\nmax_len_e <- c(750, 1120, 275, 605, 350, 750)\nlen_e <- rep(\"TL\", 6)\n\nmaxLe <- data.frame(SpeciesCode=extra_spp, maxL=max_len_e, length=len_e)\n# populating matrix with min and max sizes for each of the 6 extra spp\ne <- matrix(data = NA, nrow = 0, ncol = 4)\nfor (i in extra_spp) {\n  min <- min(prey3[which(prey3$SpeciesCode == i), 5])\n  max <- max(prey3[which(prey3$SpeciesCode == i), 5])\n  fg  <- unique(prey3[which(prey3$SpeciesCode == i), 4])\n  e   <- rbind(e, c(as.character(i), as.character(fg), \n                    as.character(min), as.character(max)))\n}\n\n# getting this matrix setup for plotting\ne <- as.data.frame(e)\ncolnames(e) <- c(\"SpeciesCode\", \"fg\", \"min\", \"max\")\ne$min <- as.numeric(as.character(e$min))\ne$max <- as.numeric(as.character(e$max))\ne <- merge(e, maxLe)\n\n# Combining original species and extra (pred-prey) species for the \n# body size range plots. \n\npento_extra <- c(\"CA.MELA\", \"CA.ORTH\", \"AP.FURC\", \"AP.VIRE\", \"LU.BOHA\", \n                 \"LU.KASM\", \"CE.ARGU\", \"CE.UROD\", \"EP.HEXA\", \"EP.MACU\",\n                 \"EP.SPIL\", \"EP.TAUV\", \"VA.LOUT\", \"PA.ARCA\", \"MO.GRAN\",\n                 \"PA.INSU\", \"AC.NIGR\", \"AC.OLIV\", \"CE.FLAV\", \"CH.SORD\",\n                 \"SC.FREN\", \"SC.RUBR\", \"CA.TERE\", \"PT.TILE\", \"CH.VAND\", \n                 \"PS.BART\", \"PS.DISP\", \"PS.OLIV\", \"CH.ORNA\")\n\n\ndf$SpeciesCode <- factor(df$SpeciesCode, levels = pento_order)\ndf$y <- as.numeric(seq(1:23)) # set y after order has been set\n\nall <- rbind(df, e)\n\nspp_order <- df[with(df, order(min)),]\nspp_order$y <- as.numeric(seq(1:23))\n\ndf$fg <- factor(df$fg, levels=c('Pi', 'BI', 'ZP', 'C', 'He'))\n\nmin_spp <- df[with(df, order(fg, min)), ]\n\nmin_spp$y <- as.numeric(seq(1:23))\n\n\n\nggplot(data = spp_order, aes(x=min, y=y, colour = fg)) +\n  geom_segment(aes(xend=max, yend = y), lineend = \"round\", size=0.8) +\n  geom_segement(data = maxL, aes(x=)) +\n  geom_point(aes(x=max, y=y), size=2, shape=19) + \n  geom_point(aes(x=min, y=y), size=2, shape=19) +\n  xlim(-50, 720) +\n  xlab(\"Size Range Sampled (mm)\") +\n  theme(axis.title.y=element_blank()) +\n  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +\n  geom_text(data=spp_order, aes(x=((min+max)/2), y=y+0.5, label=SpeciesCode))\n\n\nggplot(data = min_order, aes(x=min, y=y, colour = fg)) +\n  geom_segment(aes(xend=max, yend = y), lineend = \"round\", size=0.8) +\n  geom_segement(data = maxL, aes(x=))\ngeom_point(aes(x=max, y=y), size=2, shape=19) + \n  geom_point(aes(x=min, y=y), size=2, shape=19) +\n  xlim(-50, 720) +\n  xlab(\"Size Range Sampled (mm)\") +\n  theme(axis.title.y=element_blank()) +\n  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +\n  geom_text(data=spp_order, aes(x=((min+max)/2), y=y+0.5, label=SpeciesCode))\n\nfg_gh <- groupwise_lm_ga(pento, pento$j_fg)\nfg_gh$num <- c(1,2,3,4,5)\n# \nggplot(data = fg_gh, aes(x=lw_conf_slp, y=num, colour = variable)) +\n  geom_segment(aes(xend=up_conf_slp, yend=num),  size=0.8, colour=\"black\") +\n  geom_point(aes(x=slope, y=num), size=5, shape=19) +\n  xlim(0.9,3.1) +\n  geom_vline(xintercept=2) +\n  xlab(\"Confidence Interval\") +\n  theme(axis.title.y=element_blank()) +\n  theme(axis.ticks.y=element_blank()) +\n  theme(axis.text.y=element_blank()) #+\n  theme(panel.grid.minor=element_blank()) +\n  theme(panel.grid.major=element_blank())\n\n  \n  geom_segment(aes(xend=max, yend = num), lineend = \"round\", size=0.8) +\n  geom_segment(data = maxL, aes(x=)) +\n  geom_point(aes(x=max, y=y), size=2, shape=19) + \n  geom_point(aes(x=min, y=y), size=2, shape=19) +\n  xlim(0, 2) +\n  xlab(\"Size Range Sampled (mm)\") +\n  theme(axis.title.y=element_blank()) +\n  theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) +\n  geom_text(data=spp_order, aes(x=((min+max)/2), y=y+0.5, label=SpeciesCode))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"file": "04_analysis.r",
			"file_size": 56439,
			"file_write_time": 130347424310000000,
			"settings":
			{
				"buffer_size": 56439,
				"line_ending": "Unix"
			}
		},
		{
			"file": "01_load.r",
			"settings":
			{
				"buffer_size": 2354,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Change active plot window (quartz())\nA <- function(PlotWindow) {\n  dev.set(which=PlotWindow)\n}\n\n# ggplot default colour list for n colours\ngg_colour_hue <- function(n) {\n  hues = seq(15, 375, length=n+1)\n  hcl(h=hues, l=65, c=100)[1:n]\n}\n\n################################################################################\n#############             Graph equations and formatting            ############\n################################################################################\n# extract ggplot legend to stick beside gridExtra plots as desired:\nextract_legend <- function(a.gplot){\n  tmp    <- ggplot_gtable(ggplot_build(a.gplot))\n  leg    <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")\n  legend <- tmp$grobs[[leg]]\n  return(legend)\n}\n\nwrite_lme_gen <- function(df, y){\n  m = lm(log(y) ~ log(SL), df);\n  l <- list(a = format(coef(m)[1], digits = 2), \n            b = format(coef(m)[2], digits = 2), \n            r2 = format(summary(m)$r.squared, digits = 3)\n  )\n  \n  if (l$a >= 0) {\n    eq <- substitute(italic(y) == b %.% italic(x) + a*\",\"~~italic(r)^2~\"=\"~r2, l) \n  } else {\n      l <- list(a = format(abs(coef(m)[1]), digits = 2), \n                b = format(coef(m)[2], digits = 2), \n                r2 = format(summary(m)$r.squared, digits = 3)\n    )\n    eq <- substitute(italic(y) == b %.% italic(x) - a*\",\"~~italic(r)^2~\"=\"~r2, l)\n  }\n  as.character(as.expression(eq))\n}\n\n\nwrite_sma_eqn <- function(df, y){\n  m = lm(log(y) ~ log(SL), df);\n  l <- list(a = format(coef(m)[1], digits = 2), \n            b = format(coef(m)[2], digits = 2), \n            r2 = format(summary(m)$r.squared, digits = 2, nsmall = 2)\n  )  \n  if (l$a >= 0) {\n    eq <- substitute(italic(y) == b %.% italic(x) + a*\",\"~~italic(r)^2~\"=\"~r2, l) \n  } else {\n      l <- list(a = format(abs(coef(m)[1]), digits = 2), \n                b = format(coef(m)[2], digits = 2), \n                r2 = format(summary(m)$r.squared, digits = 2, nsmall = 2)\n    )\n    eq <- substitute(italic(y) == b %.% italic(x) - a*\",\"~~italic(r)^2~\"=\"~r2, l)\n  }\n  as.character(as.expression(eq))\n}\n\nwrite_group_sma_eqn <- function(sma_summary_df, group_column) {\n  df <- sma_summary_df\n  m = matrix(data=NA, nrow=0, ncol=5)\n  count <- length(group_column)\n  for (i in (1:count)) {\n    l <- list(slp = format(sma_summary_df$slope[i], digits=2),\n              int = format(sma_summary_df$elev[i], digits=2), \n              r2  = format(sma_summary_df$xy_r2[i], digits=2, nsmall = 2),\n              count   = sma_summary_df$n[i]\n    )\n    if (l$int >= 0) {\n      eqn_r2 <- substitute(atop(italic(r)^2~\"=\"~r2, italic(y) ==\n                          slp%.%italic(x) + int), l)\n      eqn <- substitute(italic(y) == slp*italic(x) + int, l)\n      r2  <- substitute(italic(r)^2~\"=\"~r2, l)\n      n   <- substitute(italic(n) ~ \"=\" ~ count, l)\n    } else {\n        l <- list(slp = format(sma_summary_df$slope[i], digits=2),\n                  int = format(abs(sma_summary_df$elev[i]), digits=2),\n                  r2  = format(sma_summary_df$xy_r2[i], digits=2, nsmall = 2),\n                  count   = sma_summary_df$n[i]\n      )\n      eqn_r2 <- substitute(atop(italic(r)^2~\"=\"~r2, italic(y) ==\n                          slp%.% italic(x) - int), l)\n      eqn <- substitute(italic(y) == slp*italic(x) - int, l)\n      r2  <- substitute(italic(r)^2~\"=\"~r2, l)\n      n   <- substitute(italic(n) ~ \"=\" ~ count, l)\n    }    \n    #browser()\n    eqn_r2 <- as.character(as.expression(eqn_r2)) \n    eqn    <- as.character(as.expression(eqn))\n    r2     <- as.character(as.expression(r2))\n    n      <- as.character(as.expression(n))\n    m <- rbind(m, c(as.character(df[[1]][i]), eqn_r2, eqn, r2, n))\n    #m <- rbind(m, c(as.character(df[i,1]), lm_eq))\n  }\n  m <- as.data.frame(m)\n}\n\ncount_spp <- function(df) {\n  ddply(.data = df, .(SpeciesCode), summarize, \n        len = length(SpeciesCode),\n        n = paste(\"n ==\", len)\n  )\n}\n\n\n################################################################################\n#############                    Linear Models                      ############\n################################################################################\n\nfg_lm <- function(df, gape) {\n    lm <- lm(log(gape)~log(SL), data=df)\n    data.frame(int   = coefficients(lm)[1],\n               slope = coefficients(lm)[2],\n               rsq   = summary(lm)$r.squared,\n               se    = summary(lm)$coefficients[2,2],\n               p_val = summary(lm)$coef[2,4],\n               lw_conf_slp = confint(lm, level = 0.95)[2,1],\n               up_conf_slp = confint(lm, level = 0.95)[2,2],\n               lw_conf_int = confint(lm, level = 0.95)[1,1],\n               up_conf_int = confint(lm, level = 0.95)[1,2]\n               )\n}\n\ngroupwise_lm_gh <- function(df, variable) {\n  lm  <- with(data=df, ddply(df, .(variable), function(z) {\n    t <- lm(log(gh)~log(SL), data=z)\n    data.frame(int    = coefficients(t)[1],\n               slope  = coefficients(t)[2],\n               rsq    = summary(t)$r.squared,\n               se     = summary(t)$coefficients[2,2],\n               p_val  = summary(t)$coef[2,4],\n               lw_conf_slp = confint(t, level = 0.95)[2,1],\n               up_conf_slp = confint(t, level = 0.95)[2,2],\n               lw_conf_int = confint(t, level = 0.95)[1,1],\n               up_conf_int = confint(t, level = 0.95)[1,2])\n  }))\n}\n\ngroupwise_lm_gw <- function(df, variable) {\n  lm  <- with(data=df, ddply(df, .(variable), function(z) {\n    t <- lm(log(gw)~log(SL), data=z)\n    data.frame(int    = coefficients(t)[1],\n               slope  = coefficients(t)[2],\n               rsq    = summary(t)$r.squared,\n               se     = summary(t)$coefficients[2,2],\n               p_val  = summary(t)$coef[2,4],\n               lw_conf_slp = confint(t, level = 0.95)[2,1],\n               up_conf_slp = confint(t, level = 0.95)[2,2],\n               lw_conf_int = confint(t, level = 0.95)[1,1],\n               up_conf_int = confint(t, level = 0.95)[1,2])\n  }))\n}\n\ngroupwise_lm_ga <- function(df, variable) {\n  lm  <- with(data=df, ddply(df, .(variable), function(z) {\n    t <- lm(log(ga)~log(SL), data=z)\n    data.frame(int    = coefficients(t)[1],\n               slope  = coefficients(t)[2],\n               rsq    = summary(t)$r.squared,\n               se     = summary(t)$coefficients[2,2],\n               p_val  = summary(t)$coef[2,4],\n               lw_conf_slp = confint(t, level = 0.95)[2,1],\n               up_conf_slp = confint(t, level = 0.95)[2,2],\n               lw_conf_int = confint(t, level = 0.95)[1,1],\n               up_conf_int = confint(t, level = 0.95)[1,2])\n  }))\n}\n\n\nawesome <- function(lm) {\n  ldply(lm, function(model) {\n    c(\n      \"coefs\" = coef(model),\n      \"confint\" = confint(model, level=0.95),\n      \"rsq\" = summary(model)$r.squared,\n      \"se\" = summary(model)$coefficients[2,2],\n      \"p_val\" = summary(model)$coefficients[2,4]\n    )\n  })\n}\n\n################################################################################\n#############                    SMA Functions                      ############\n################################################################################\nrun_sma <- function(df, gapeType=c(\"gh\", \"gw\", \"ga\"), robust=TRUE) {\n  if (robust == TRUE) {\n    switch(gapeType,\n    \"gh\" = { sma(gh ~ SL, data = df, log = \"xy\", method = \"SMA\", robust = TRUE, \n      slope.test = 1) },\n    \"gw\" = { sma(gw ~ SL, data = df, log = \"xy\", method = \"SMA\", robust = TRUE, \n      slope.test = 1) },\n    \"ga\" = { sma(ga ~ SL, data = df, log = \"xy\", method = \"SMA\", robust = TRUE, \n      slope.test = 2) }\n    )\n  } else if (robust == FALSE) {\n    switch(gapeType, \n    \"gh\" = { sma(gh ~ SL, data = df, log = \"xy\", method = \"SMA\", robust = FALSE, \n      slope.test = 1) },\n    \"gw\" = { sma(gw ~ SL, data = df, log = \"xy\", method = \"SMA\", robust = FALSE, \n      slope.test = 1) },\n    \"ga\" = { sma(ga ~ SL, data = df, log = \"xy\", method = \"SMA\", robust = FALSE, \n      slope.test = 2) }\n    )\n  }\n}\n\ncheck_assump <- function(sma_object, plotTitle) {\n  plot(sma_object, which = \"qq\")\n  plot(sma_object, which = \"residual\")\n  title(main = plotTitle)\n  abline(h=0, col=\"red\")\n}\n\nmk_sma_df <- function(t) {\n  data.frame(elevation  = t$coef[[1]][1,1],\n             lw_ci_elev = t$coef[[1]][1,2],\n             up_ci_elev = t$coef[[1]][1,3],\n             slope      = t$coef[[1]][2,1],\n             lw_ci_slp  = t$coef[[1]][2,2],\n             up_ci_slp  = t$coef[[1]][2,3],\n             r2         = t$r2[[1]],\n             n          = t$n[[1]],\n             pval       = t$pval[[1]]\n  )\n}\n\n\nmk_sma_graph_df <- function(sma_summary_df, num_groups, group_name) {\n  sma_graph_df <- data.frame(group=character(), slp=numeric(), int=numeric(), \n                             from=numeric(), to=numeric(), yfrom=numeric(), \n                             yto=numeric(), stringsAsFactors=FALSE\n  )\n  for (i in 1:num_groups) {\n    from  <- sma_summary_df[10, i]\n    to    <- sma_summary_df[11, i]\n    slp   <- sma_summary_df[3, i]\n    int   <- sma_summary_df[1, i]\n    yfrom <- 10^(slp*log10(from) + int)\n    yto   <- 10^(slp*log10(to) + int)\n    group <- colnames(sma_summary_df)[i]\n    midpoint_y <- sqrt(yfrom * yto)\n    midpoint_x <- sqrt(from * to)\n    ref_intercept <- log10(midpoint_y/(midpoint_x^2))\n    \n    row <- t(c(group=group, slp=slp, int=int, from=from, to=to, yfrom=yfrom,\n               yto=yto, midpoint_x=midpoint_x, midpoint_y=midpoint_y, \n               ref_intercept=ref_intercept))\n    sma_graph_df <- rbind(sma_graph_df, row)\n  }\n  sma_graph_df[, 2] <- as.numeric(as.character(sma_graph_df[, 2]))\n  sma_graph_df[, 3] <- as.numeric(as.character(sma_graph_df[, 3]))\n  sma_graph_df[, 4] <- as.numeric(as.character(sma_graph_df[, 4]))\n  sma_graph_df[, 5] <- as.numeric(as.character(sma_graph_df[, 5]))\n  sma_graph_df[, 6] <- as.numeric(as.character(sma_graph_df[, 6]))\n  sma_graph_df[, 7] <- as.numeric(as.character(sma_graph_df[, 7]))\n  sma_graph_df[, 8] <- as.numeric(as.character(sma_graph_df[, 8]))\n  sma_graph_df[, 9] <- as.numeric(as.character(sma_graph_df[, 9]))\n  sma_graph_df[, 10] <- as.numeric(as.character(sma_graph_df[, 10]))\n  names(sma_graph_df)[1] <- group_name\n  return(sma_graph_df)\n}\n\n# Used for single group\nmk_sma_summary <- function(sma_object, group=\"column_name\") {\n  rows <- c('elev', 'slp_test', 'slope', 'lower_ci', 'upper_ci',\n            'slp_p_value', 'xy_r^2', 'xy_corr_p_value', 'n', 'from', 'to')\n  #if (grouping==F) {\n    elev = coef(sma_object)[[1]]\n    slp_test = sma_object$slopetest[[1]][[4]]\n    slope  = sma_object$slopetest[[1]][[5]]\n    lower  = sma_object$slopetest[[1]][6][[1]][[1]]\n    upper  = sma_object$slopetest[[1]][6][[1]][[2]]\n    slp_p_val  = sma_object$slopetest[[1]][[3]]\n    xy_r2  = sma_object$r2[[1]]\n    xy_cor = sma_object$pval[[1]]\n    n = sma_object$n[[1]]\n    from = sma_object$from[[1]]\n    to   = sma_object$to[[1]]\n\n  columns <- c(elev, slp_test, slope, lower, upper, slp_p_val, xy_r2, xy_cor, n,\n               from, to)\n  \n  sma_df <- data.frame(columns, row.names=rows)\n  names(sma_df) <- sma_object$groups\n  #sma_df <- format(sma_df[1], digits=3, sci=F)\n  return(sma_df)\n}\n\nmk_spp_summary <- function(sma_object, num_spp=NA, grouping=F, group_name) {\n# Use (grouping == F) when multiple sma_objects are generated using dlply\n# Use (grouping == T) when the sma_object was generated using x~y*group\n  if (grouping==F) {\n    sma_df <- data.frame(elev=numeric(), slp_test=numeric(), slope=numeric(), \n                      upper=numeric(), lower=numeric(), slp_p_val=numeric(), \n                      xy_r2=numeric(), xy_cor=numeric(), n=numeric(), \n                      from=numeric(), to=numeric()\n    )\n\n    for (i in 1:num_spp) {\n      #spp = as.factor(names(sma_object[[1]]))\n      #spp = as.character(attr(sma_object[i], which=\"split_labels\")[[i]][[1]])\n      elev = coef(sma_object[[i]])[[1]]\n      slp_test = sma_object[[i]]$slopetest[[1]][[4]]\n      slope  = sma_object[[i]]$slopetest[[1]][[5]]\n      lower  = sma_object[[i]]$slopetest[[1]][6][[1]][[1]]\n      upper  = sma_object[[i]]$slopetest[[1]][6][[1]][[2]]\n      slp_p_val  = sma_object[[i]]$slopetest[[1]][[3]]\n      xy_r2  = sma_object[[i]]$r2[[1]]\n      xy_cor = sma_object[[i]]$pval[[1]]\n      n = sma_object[[i]]$n[[1]]\n      from = sma_object[[i]]$from[[1]]\n      to   = sma_object[[i]]$to[[1]]   \n      \n      row <- c(elev, slp_test, slope, lower, upper, slp_p_val, xy_r2, xy_cor, \n               n, from, to)\n      sma_df <- rbind(sma_df, row)\n      columns <- c(\"elev\", \"slp_test\", \"slope\", \"lower\", \"upper\", \"slp_p_val\", \n               \"xy_r2\", \"xy_cor\", \"n\", \"from\", \"to\")\n  \n      #sma_df <- data.frame(columns, row.names=rows)\n      names(sma_df) <- columns\n      #sma_df <- format(sma_df[1], digits=3, sci=F)\n    }\n    return(sma_df)\n  } else if (grouping==T) {\n\n    sma_df <- data.frame(group=character(), elev=numeric(), slp_test=numeric(), \n                      slope=numeric(), upper=numeric(), lower=numeric(), \n                      slp_p_val=numeric(), xy_r2=numeric(), xy_cor=numeric(), \n                      n=numeric(), from=numeric(), to=numeric(),\n                      stringsAsFactors=FALSE\n    )\n    for (i in 1:length(sma_object$groups)) {\n\n      elev = sma_object$coef[[i]][[1]][1]\n      slp_test = sma_object$slopetest[[i]]$test.value\n      slope = sma_object$slopetest[[i]]$b\n      lower = sma_object$slopetest[[i]]$ci[1, 1]\n      upper = sma_object$slopetest[[i]]$ci[1, 2]\n      slp_p_val = sma_object$slopetest[[i]]$p\n      xy_r2 = sma_object$r[i][[1]]\n      xy_cor = sma_object$pval[i][[1]]\n      n = sma_object$n[i][[1]]\n      from = sma_object$from[i][[1]]\n      to = sma_object$to[i][[1]]\n      group = sma_object$groups[i][[1]]\n\n      row <- c(\"group\"=as.character(group), \"elev\"=as.numeric(elev), \n               \"slp_test\"=as.numeric(slp_test), \"slope\"=as.numeric(slope),\n               \"lower\"=as.numeric(lower), \"upper\"=as.numeric(upper), \n               \"slp_p_val\"=as.numeric(slp_p_val), \"xy_r2\"=as.numeric(xy_r2), \n               \"xy_cor\"=as.numeric(xy_cor), \"n\"=as.numeric(n), \n               \"from\"=as.numeric(from), \"to\"=as.numeric(to))\n      sma_df[i, ] <- row\n    }\n  columns <- c(\"group\", \"elev\", \"slp_test\", \"slope\", \"lower\", \"upper\", \n         \"slp_p_val\", \"xy_r2\", \"xy_cor\", \"n\", \"from\", \"to\")\n  #sma_df <- data.frame(columns, row.names=rows)\n  names(sma_df) <- columns\n  #sma_df <- format(sma_df[1], digits=3, sci=F)\n  \n  for (x in 2:12) {\n    sma_df[, x] <- as.numeric(sma_df[, x])\n  }\n  return(sma_df)\n  }\n}\n\n\n\nmk_smaSPP_graph_df <- function(sma_summary_df, num_spp, group_name) {\n  sma_graph_df <- data.frame(group=character(), slp=numeric(), int=numeric(), \n                             from=numeric(), to=numeric(), yfrom=numeric(), \n                             yto=numeric(),\n                             stringsAsFactors=FALSE\n  )\n  for (i in 1:num_spp) {\n    from  <- sma_summary_df[i, 11]\n    to    <- sma_summary_df[i, 12]\n    slp   <- sma_summary_df[i, 4]\n    int   <- sma_summary_df[i, 2]\n    yfrom <- 10^(slp*log10(from) + int)\n    yto   <- 10^(slp*log10(to) + int)\n    group <- as.character(sma_summary_df[i, 1])\n    midpoint_y <- (yfrom + yto) / 2\n    midpoint_x <- (from + to) / 2\n    ref_intercept_iso <- log10(midpoint_y/(midpoint_x))\n    slope_test <- sma_summary_df[i, 3]\n    \n    row <- t(c(group=group, slp=slp, int=int, from=from, to=to, yfrom=yfrom,\n               yto=yto, midpoint_x=midpoint_x, midpoint_y=midpoint_y, \n               ref_intercept_iso=ref_intercept_iso, slope_test = slope_test)\n             )\n    sma_graph_df <- rbind(sma_graph_df, row)\n  }\n  sma_graph_df[, 2]  <- as.numeric(as.character(sma_graph_df[, 2]))\n  sma_graph_df[, 3]  <- as.numeric(as.character(sma_graph_df[, 3]))\n  sma_graph_df[, 4]  <- as.numeric(as.character(sma_graph_df[, 4]))\n  sma_graph_df[, 5]  <- as.numeric(as.character(sma_graph_df[, 5]))\n  sma_graph_df[, 6]  <- as.numeric(as.character(sma_graph_df[, 6]))\n  sma_graph_df[, 7]  <- as.numeric(as.character(sma_graph_df[, 7]))\n  sma_graph_df[, 8]  <- as.numeric(as.character(sma_graph_df[, 8]))\n  sma_graph_df[, 9]  <- as.numeric(as.character(sma_graph_df[, 9]))\n  sma_graph_df[, 10] <- as.numeric(as.character(sma_graph_df[, 10]))\n  sma_graph_df[, 11] <- as.numeric(as.character(sma_graph_df[, 11]))\n  names(sma_graph_df)[1] <- group_name\n  return(sma_graph_df)\n}\n\n# Makes SMA plots for Families all on one graph\n# ==============================================================================\nmk_SMAfacets <- function( df_points, df_lines, gapeType = c(\"gh\", \"gw\", \"ga\"), \n  point_colour = c(\"j_fg\", \"Family\", \"SpeciesCode\", \"Region\", \"dissected_by\", \n                   \"observer_id\"),\n  labels = c(\"dissected_by\", \"Region\", \"SpecimenID\", \"None\"),\n  facetting = c(\"j_fg\", \"Family\", \"SpeciesCode\", \"Region\", \"dissected_by\", \n                \"observer_id\"), \n  facet_columns ) { \n  plot_base <- ggplot(data = df_points, aes_string(x = \"SL\", y = gapeType)) +\n       geom_point( aes_string(colour = point_colour)) +\n       geom_segment(data = df_lines, aes(x = from, xend = to, y = yfrom, \n        yend = yto)) +\n       scale_y_log10() +\n       scale_x_log10() +\n       xlab(\"log(standard length, mm)\") +\n       theme_bw()\n  switch(gapeType,\n    \"gh\" = { plot_base <- plot_base + ylab(\"log(vertical gape, mm)\") },\n      \"gw\" = { plot_base <- plot_base + ylab(\"log(horizontal gape, mm)\") },\n      \"ga\" = { plot_base <- plot_base + ylab(expression(\n        paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) }\n  )\n  if (labels == \"None\") {\n    plot1 <- plot_base\n  } else {\n    plot1 <- plot_base + geom_text(position = position_jitter(w = 0.02, \n      h = 0.02), aes_string(label = labels), size = 2)\n  }\n  plot1 + facet_wrap( as.formula(sprintf('~ %s', facetting)), ncol = facet_columns )\n}\n\ntheme_L_border <- function(colour = \"black\", size = 1, linetype = 1) {\n  structure(\n    function(x = 0, y = 0, width = 1, height = 1, ...) {\n      polylineGrob(\n        x=c(x+width, x, x), y=c(y,y,y+height), ..., default.units = \"npc\",\n        gp=gpar(lwd=size, col=colour, lty=linetype),\n      )\n    },\n    class = \"theme\",\n    type = \"box\",\n    call = match.call()\n  )\n}\n\nmk_SMAfacets2 <- function( df_points, df_lines, gapeType = c(\"gh\", \"gw\", \"ga\"), \n    #point_colour = c(\"j_fg\", \"Family\", \"SpeciesCode\", \"Region\", \"dissected_by\"),\n    labels = c(\"dissected_by\", \"Region\", \"SpecimenID\", \"None\"),\n    facetting = c(\"j_fg\", \"Family\", \"SpeciesCode\", \"Region\", \"dissected_by\"), \n    facet_columns, eqn_df\n    ) {\n  plot_base <- ggplot(data = df_points, aes_string(x = \"SL\", y = gapeType)) +\n       geom_point(shape = 1, colour = \"grey\") +\n       geom_segment(data = df_lines, aes(x = from, xend = to, y = yfrom, \n        yend = yto)) +\n       scale_y_log10() +\n       scale_x_log10() +\n       xlab(\"log(standard length, mm)\") +\n       theme_classic() +\n       theme(strip.background = element_blank(),\n         plot.background = element_blank(), \n         panel.grid.major = element_blank(), \n         panel.grid.minor = element_blank(), \n         panel.border = element_blank(), \n         panel.background = element_blank(),\n         axis.line = element_line(colour = \"black\"),\n         axis.line.x = element_line(colour = \"black\")\n        ) +\n        geom_point(aes(x = 10, y = 1), alpha = 0) +\n        geom_point(aes(x = 650, y = 12000), alpha = 0) +\n        geom_text(data = eqn_df, aes(x=280, y=3.5, \n          label=eqn), parse=TRUE, size = 3.5) +\n        geom_abline(data = df_lines, aes_string(intercept = \"ref_intercept\"), \n          slope = 2, linetype = 2, colour = \"grey50\") \n  switch(gapeType,\n    \"gh\" = { plot_base <- plot_base + ylab(\"log(vertical gape, mm)\") },\n      \"gw\" = { plot_base <- plot_base + ylab(\"log(horizontal gape, mm)\") },\n      \"ga\" = { plot_base <- plot_base + ylab(expression(\n        paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) }\n  )\n  if (labels == \"None\") {\n    plot1 <- plot_base\n  } else {\n    plot1 <- plot_base + geom_text(position = position_jitter(w = 0.02, \n      h = 0.02), aes_string(label = labels), size = 2)\n  }\n  plot1 + facet_wrap( as.formula(sprintf('~ %s', facetting)), ncol = facet_columns, \n  scales = \"free\")\n}\n\nmk_multipanel_plots1 <- function(point_df, colour, line_df_row, ref_intercept_row)\nggplot(data = point_df, aes_string(x = \"SL\", y = \"ga\")) +\n    geom_segment(data = line_df_row, aes_string(x = \"from\", xend = \"to\", \n     y = \"yfrom\", yend = \"yto\")) +\n    geom_point(colour = colour) +\n    scale_y_log10(limits = c(1, 12000)) +\n    scale_x_log10(limits = c(1, 1100)) +\n    theme(axis.title.x = element_blank()) +\n    theme(axis.title.y = element_blank()) +\n    #xlab(\"log(standard length, mm)\") +     \n    #ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) + \n  geom_abline(intercept = ref_intercept_row, slope = 2, linetype = 2, \n    colour = \"darkgrey\") +\n  theme_bw() +\n  theme( plot.background = element_blank(), \n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank(), \n    panel.border = element_blank(), \n    panel.background = element_blank()\n  ) +\n    theme(axis.line = element_line(color = 'black'))\n\n\nmk_multipanel_plots2 <- function(fg_point_df, spp_point_df, spp_line_df_row, \n  #ref_intercept_row, \n  eqn_df, eqn_x, eqn_y, r2_x, r2_y, n_x, n_y, x_axis_labels=TRUE, \n  y_axis_labels=TRUE, fg_line_intercept, y_axis_text = TRUE, x_axis_text = TRUE,\n  plot_title = \"\", y_value, gape_dim = 'gh') \n  {\n  plotTitle <- substitute(italic(plot_title), list(plot_title = plot_title))\n  plot_base <- \n      ggplot(data = fg_point_df, aes_string(x = \"SL\", y = gape_dim)) +\n        geom_point(shape = 1, colour = \"grey\") +\n        geom_segment(data = spp_line_df_row, aes_string(x = \"from\", xend = \"to\", \n         y = \"yfrom\", yend = \"yto\")) +\n        geom_point(data = spp_point_df, colour = \"black\", shape = 1) +\n        scale_y_log10() +\n        scale_x_log10() +\n      geom_abline(intercept = fg_line_intercept, slope = 1, linetype = 2, \n        colour = \"darkgrey\") +\n      theme_bw() +\n      theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n      theme(axis.line = element_line(color = 'black')) +\n      geom_text(data = eqn_df, aes_string(x = eqn_x, y = eqn_y, \n        label = \"eqn\"), parse = TRUE, size = 3, hjust = 1) +\n      geom_text(data = eqn_df, aes_string(x = r2_x, y = r2_y, \n        label = \"r2\"), parse = TRUE, size = 3, hjust = 1) +\n      geom_text(data = eqn_df, aes_string(x = n_x, y = n_y, \n        label = \"n\"), parse = TRUE, size = 3, hjust = 1) +\n      labs(title = bquote(plain(.(plotTitle)))) +\n      theme(plot.title = element_text(size = 9), \n            axis.text = element_text(size = 8),\n            axis.ticks.length = unit(-0.1, \"cm\"),\n            axis.text.y = element_text(margin = margin(0, 5, 0, 0)), \n            axis.text.x = element_text(margin = margin(5, 0, 0, 0), vjust = 1))\n      #plot <- plot_base +\n  if (x_axis_labels == TRUE) {\n    plot1 <- plot_base + xlab(\"standard length, mm\")\n  } else if (x_axis_labels == FALSE) {\n    plot1 <- plot_base + theme(axis.title.x = element_blank())\n  }\n  if (y_axis_labels == TRUE) {\n    plot2 <- plot1 + ylab(expression(paste(\"gape height, \", mm, \"\", sep= \"\")))\n  } else if (y_axis_labels == FALSE) {\n    plot2 <- plot1 + theme(axis.title.y = element_blank())\n  } \n  if (y_axis_text == TRUE) {\n    plot3 <- plot2\n  } else if (y_axis_text == FALSE) {\n    plot3 <- plot2 + theme(axis.text.y = element_blank())\n  }\n  if (x_axis_text == TRUE) {\n    plot4 <- plot3\n  } else if (x_axis_text == FALSE) {\n    plot4 <- plot3 + theme(axis.text.x = element_blank())\n  }\n  plot4  \n}\n\n# This function is used for making the multipanel plots for a presentation\n# This has bigger fonts, and such.\nmk_multipanel_plots3 <- function(fg_point_df, spp_point_df, spp_line_df_row, \n  #ref_intercept_row, \n  eqn_df, eqn_x, eqn_y, r2_x, r2_y, n_x, n_y, x_axis_labels=TRUE, \n  y_axis_labels=TRUE, fg_line_intercept, y_axis_text = TRUE, x_axis_text = TRUE,\n  plot_title = \"\") \n  {\n  plotTitle <- substitute(plot_title, list(plot_title = plot_title))\n  plot_base <- \n      ggplot(data = fg_point_df, aes_string(x = \"SL\", y = \"ga\")) +\n        geom_point(shape = 1, colour = \"grey\") +\n        geom_segment(data = spp_line_df_row, aes_string(x = \"from\", xend = \"to\", \n         y = \"yfrom\", yend = \"yto\")) +\n        geom_point(data = spp_point_df, colour = \"black\", shape = 19,) +\n        scale_y_log10(limits = c(0.8, 17000), breaks = c(1, 10, 100, 1000, 10000)) +\n        scale_x_log10(limits = c(15, 700), breaks = c(50, 100, 500)) +\n        #xlab(\"log(standard length, mm)\") +     \n        #ylab(expression(paste(\"log(gape area \", mm^2, \")\", sep= \"\"))) + \n      #geom_abline(intercept = ref_intercept_row, slope = 2, linetype = 2, \n       # colour = \"darkgrey\") +\n      geom_abline(intercept = fg_line_intercept, slope = 2, linetype = 2, \n        colour = \"darkgrey\") +\n      theme_bw() +\n      theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n      theme(axis.line = element_line(color = 'black')) +\n      geom_text(data = eqn_df, aes_string(x = eqn_x, y = eqn_y, \n        label = \"eqn\"), parse = TRUE, size = 6, hjust = 1) +\n      geom_text(data = eqn_df, aes_string(x = r2_x, y = r2_y, \n        label = \"r2\"), parse = TRUE, size = 6, hjust = 1) +\n      geom_text(data = eqn_df, aes_string(x = n_x, y = n_y, \n        label = \"n\"), parse = TRUE, size = 6, hjust = 1) +\n      labs(title = bquote(plain(.(plotTitle)))) +\n      #labs(title = bquote(italic(.(plotTitle)))) +\n      theme(plot.title = element_text(size = 20)) +\n      theme(axis.text = element_text(size = 14)) +\n      theme(plot.margin = unit(c(0, 0, 0, 0), \"cm\"))\n      #theme(axis.ticks.length = unit(-0.1, \"cm\")) +\n      #theme(axis.ticks.margin = unit(0.3, \"cm\"))\n      #plot <- plot_base +\n  if (x_axis_labels == TRUE) {\n    plot1 <- plot_base + xlab(\"standard length, mm\")\n  } else if (x_axis_labels == FALSE) {\n    plot1 <- plot_base + theme(axis.title.x = element_blank())\n  }\n  if (y_axis_labels == TRUE) {\n    plot2 <- plot1 + ylab(expression(paste(\"gape area, \", mm^2, \"\", sep= \"\")))\n  } else if (y_axis_labels == FALSE) {\n    plot2 <- plot1 + theme(axis.title.y = element_blank())\n  } \n  if (y_axis_text == TRUE) {\n    plot3 <- plot2\n  } else if (y_axis_text == FALSE) {\n    plot3 <- plot2 + theme(axis.text.y = element_blank())\n  }\n  if (x_axis_text == TRUE) {\n    plot4 <- plot3\n  } else if (x_axis_text == FALSE) {\n    plot4 <- plot3 + theme(axis.text.x = element_blank())\n  }\n  plot4  \n}\n\n\nmk_SMAplot <- function(df_points, df_lines, facets = TRUE, x = \"SL\", gapeType = \n  c(\"gh\", \"gw\", \"ga\"), grouping = c(\"j_fg\", \"Family\", \"SpeciesCode\", \"Region\", \n  \"dissected_by\"), labels = c(\"Region\", \"Region_colour\", \"dissected_by\",  \n  \"dissected_colour\", \"SpecimenID\", \"None\"), axis_labels) {\n  plot_base <- ggplot(data = df_points, aes_string(x = x, y = gapeType)) +\n  scale_y_log10() +\n  scale_x_log10() +\n  xlab(\"log(standard length, mm)\") +\n  theme_bw() +\n  theme(panel.border = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()) +\n  theme(axis.line = element_line(color = 'black')) +\n  #labs(title = bquote(plain(.(plotTitle)))) +\n      #labs(title = bquote(italic(.(plotTitle)))) +\n  theme(axis.text = element_text(size = 8)) +\n  theme(plot.margin = unit(c(0, 0, 0, 0), \"cm\")) +\n  theme(axis.ticks.length = unit(-0.2, \"cm\")) +\n  theme(axis.ticks.margin = unit(0.3, \"cm\"))\n  if (facets == FALSE) {\n    plot1 <- plot_base + geom_point( aes_string(colour = grouping), size = 1.5 ) +\n             geom_segment(data = df_lines, aes(x = from, xend = to, y = yfrom, \n                yend = yto)) + aes_string(colour = grouping)\n    switch(labels,\n    \"dissected_by\" = { plot1 <- plot1 + \n      geom_text(position=position_jitter(w=0.03, h=0.03), \n        aes(label=dissected_by), size=3) },\n    \"Region\" = { plot1 <- plot1 + \n      geom_text(position=position_jitter(w=0.03, h=0.03), \n        aes(label=dissected_by), size=3) },\n    \"None\" = { plot1 <- plot1 }\n      )\n    switch(gapeType,\n      \"gh\" = { plot1 + ylab(\"log(vertical gape, mm)\") },\n      \"gw\" = { plot1 + ylab(\"log(horizontal gape, mm)\") },\n      \"ga\" = { plot1 + ylab(expression(paste(\"log(gape area \", mm^2, \")\", \n        sep= \"\"))) }\n      )\n  } else if (facets == TRUE) {\n    plot2 <- plot_base + geom_point() +\n             geom_segment(data = df_lines, aes(x = from, xend = to, y = yfrom, \n                yend = yto))\n    switch(labels,\n    \"dissected_by\" = { plot2 <- plot2 + \n      geom_point( aes_string(colour=labels) ) +\n      geom_text(position=position_jitter(w=0.03, h=0.03), \n        aes(label=dissected_by), size=3) },\n    \"dissected_colour\" = { plot2 <- plot2 +\n      geom_point( aes(colour=dissected_by)) },\n    \"Region\" = { plot2 <- plot2 + \n      geom_point( aes_string(colour=labels) ) +\n      geom_text(position=position_jitter(w=0.03, h=0.03), \n        aes(label=Region), size=3) },\n    \"Region_colour\" = { plot2 <- plot2 +\n      geom_point( aes(colour=Region)) },\n    \"None\" = { plot2 <- plot2 }\n      )\n    switch(gapeType,\n      \"gh\" = { plot3 <- plot2 + ylab(\"log(vertical gape, mm)\") },\n      \"gw\" = { plot3 <- plot2 + ylab(\"log(horizontal gape, mm)\") },\n      \"ga\" = { plot3 <- plot2 + ylab(expression(paste(\"log(gape area \", mm^2, \")\", \n        sep= \"\"))) }\n      )\n    switch(grouping,\n      \"j_fg\" = { plot3 + facet_wrap( ~ j_fg) },\n      \"Family\" = { plot3 + facet_wrap( ~ Family) },\n      \"SpeciesCode\" = { plot3 + facet_wrap( ~ SpeciesCode) },\n      \"Region\" = { plot3 + facet_wrap( ~ Region) },\n      \"dissected_by\" = { plot3 + facet_wrap( ~ dissected_by) }\n      )\n  }\n}\n\n# Plotting using grid, with a set viewport\nset_vp <- function(row, column) {\n  viewport(layout.pos.row = row, layout.pos.col = column)\n}\n\n\n\n\n# groupwise_lm_gh <- function(df, variable) {\n#   lm  <- with(data=df, ddply(df, .(variable), function(z) {\n#     t <- lm(log(gh)~log(SL), data=z)\n#     data.frame(int   = coefficients(t)[1],\n#                slope = coefficients(t)[2],\n#                rsq   = summary(t)$r.squared,\n#                se    = summary(t)$coefficients[2,2],\n#                p_val = summary(t)$coef[2,4])\n#   }))\n# }\n# \n# groupwise_lm_gw <- function(df, variable) {\n#   lm  <- with(data=df, ddply(df, .(variable), function(z) {\n#     t <- lm(log(gw)~log(SL), data=z)\n#     data.frame(int   = coefficients(t)[1],\n#                slope = coefficients(t)[2],\n#                rsq   = summary(t)$r.squared,\n#                se    = summary(t)$coefficients[2,2],\n#                p_val = summary(t)$coef[2,4])\n#   }))\n# }\n# \n# groupwise_lm_ga <- function(df, variable) {\n#   lm  <- with(data=df, ddply(df, .(variable), function(z) {\n#     t <- lm(log(ga)~log(SL), data=z)\n#     data.frame(int   = coefficients(t)[1],\n#                slope = coefficients(t)[2],\n#                rsq   = summary(t)$r.squared,\n#                se    = summary(t)$coefficients[2,2],\n#                p_val = summary(t)$coef[2,4])\n#   }))\n# }\n# \n# call_master_df <- function(lm) {\n#     coefs <- ldply(lm, coef)\n#     rsq   <- function(lm) c(\"rsqd\"  = summary(lm)$r.squared)\n#     se    <- function(lm) c(\"SE\"    = summary(lm)$coefficients[2,2])\n#     p_val <- function(lm) c(\"p_val\" = summary(lm)$coefficients[2,4])\n#     spp.n <- ddply(.data = p, .(SpeciesCode), summarize, \n#                    n     = paste(\"n ==\", length(SpeciesCode))\n#                    )\n#     dfs <- list(coefs,\n#                 rsqs   <- ldply(lm, rsq),\n#                 ses    <- ldply(lm, se),\n#                 p_vals <- ldply(lm, p_val),\n#                 spp.n)\n#     all <- join_all(dfs, by=\"SpeciesCode\")\n# }\n\n# Function that generates data\n\n# Example dataframe produced by using above groupwise function\n# test <- groupwise_lm_gh(fish, fish$SpeciesCode)\n\n\nwrite_lme_groups <- function(summ_df, variable) {\n  df <- summ_df\n  m = matrix(data=NA, nrow=0, ncol=2)\n  len <- length(variable)\n  for (i in (1:len)) {\n    l <- list(slp = format(df[[3]][i], digits=2),\n              int = format(df[[2]][i], digits=2), \n              r2 = format(df[[4]][i], digits=2)\n    )\n    if (l$int >= 0) {\n      eqn <- substitute(italic(y) ==\n                          slp%.%italic(x) + int*~~italic(r)^2~\"=\"~r2, l)\n    } else {\n        l <- list(slp = format(df[[3]][i], digits=2),\n                  int = format(abs(df[[2]][i]), digits=2), \n                  r2 = format(df[[4]][i], digits=2)\n      )\n      eqn <- substitute(italic(y) ==\n                          slp%.% italic(x) - int*~~italic(r)^2~\"=\"~r2, l)\n    }\n    #browser()\n    lm_eq <- as.character(as.expression(eqn)) \n    m <- rbind(m, c(as.character(df[[1]][i]), lm_eq))\n    #m <- rbind(m, c(as.character(df[i,1]), lm_eq))\n  }\n  m <- as.data.frame(m)\n}\n\n\n################################################################################\n#############             Predator - Prey Size Functions            ############\n################################################################################\n# groupwise_rq <- function(df, variable) {\n#   rq  <- ddply(df, .(variable), function(z) {\n#     r <- rq(psize ~ sl, tau = c(0.10, 0.90), data = z) \n#     })\n# }\n# \n# rq(formula, tau=.5, data, subset, weights, na.action,\n#    method=\"br\", model = TRUE, contrasts, ...) \n# \n# groupwise_lm_gw <- function(df, variable) {\n#   lm  <- with(data=df, ddply(df, .(variable), function(z) {\n#     t <- lm(log(gw)~log(SL), data=z)\n#     data.frame(int   = coefficients(t)[1],\n#                slope = coefficients(t)[2],\n#                rsq   = summary(t)$r.squared,\n#                se    = summary(t)$coefficients[2,2],\n#                p_val = summary(t)$coef[2,4])\n#   }))\n# }\n\n# Mapping function taken from SO answer by Joris Meys from:\n# http://stackoverflow.com/questions/5353184/fixing-maps-library-data-for-pacific-centred-0-360-longitude-display\n# Used to adjust polygons so that they are not left 'open' on the cut when the \n# ends (for \"world\" and \"worldHiRes\") when the map is pacific ocean-centric.\n# xlimits have been added to the final call for map() at the end of the function \n# because they were causing islands in the pacific to disappear in first part of \n# the function where the polygons are moved around. \nplot.map <- function(database,center, xlimits, ...){\n    Obj <- map(database,...,plot=F)\n    coord <- cbind(Obj[[1]],Obj[[2]])\n\n    # split up the coordinates\n    id <- rle(!is.na(coord[,1]))\n    id <- matrix(c(1,cumsum(id$lengths)),ncol=2,byrow=T)\n    polygons <- apply(id,1,function(i){coord[i[1]:i[2],]})\n\n    # split up polygons that differ too much\n    polygons <- lapply(polygons,function(x){\n        x[,1] <- x[,1] + center\n        x[,1] <- ifelse(x[,1]>180,x[,1]-360,x[,1])\n        if(sum(diff(x[,1])>300,na.rm=T) >0){\n          id <- x[,1] < 0\n          x <- rbind(x[id,],c(NA,NA),x[!id,])\n       }\n       x\n    })\n    # reconstruct the object\n    polygons <- do.call(rbind,polygons)\n    Obj[[1]] <- polygons[,1]\n    Obj[[2]] <- polygons[,2]\n\n    map(Obj,..., xlim=xlimits)\n}\n\n\n################################################################################\n#############                Bootstrapping Functions               #############\n################################################################################\n\n# Hadley Wickham answer on SO!!! \n# How to sub sample data by group efficiently using plyr\n# http://stackoverflow.com/questions/16912186/how-do-i-sub-sample-data-by-group-efficiently\nsample_by_spp <- function(df, dfgroup, size, replace) {\n  ddply(df, dfgroup, function(x) {\n    x[sample(nrow(x), size = size, replace = replace), , drop = FALSE]\n  })\n}\n\nmk_all_spp_samp_df <- function(p_df, b_df, z_df, h_df, c_df){\n  p_samp <- sample_by_spp(df = p_df, dfgroup = 'SpeciesCode', size = 12, replace = TRUE)\n  b_samp <- sample_by_spp(df = b_df, dfgroup = 'SpeciesCode', size = 24, replace = TRUE)\n  z_samp <- sample_by_spp(df = z_df, dfgroup = 'SpeciesCode', size = 8, replace = TRUE)\n  h_samp <- sample_by_spp(df = h_df, dfgroup = 'SpeciesCode', size = 7, replace = TRUE)\n  all_spp_samp <- rbind.fill(p_samp, b_samp, z_samp, h_samp, c_df)\n  return(all_spp_samp)\n}\n\nslp_check <- function(x, slope_value) {\n  check_df <- data.frame(j_fg = c(\"Pi\", \"BI\", \"ZP\", \"He\", \"C\"), iso = 0, \n               neg = 0, pos = 0)\n  for (i in 1:5) {\n    if (x$groupsummary$Slope_test_p[i] > 0.05) {\n      check_df$iso[i] <- 1\n    } else {\n        if (x$groupsummary$Slope_lowCI[i] > slope_value) {\n          check_df$pos[i] <- 1\n        } else {\n            if (x$groupsummary$Slope_highCI[i] < slope_value) {\n              check_df$neg[i] <- 1\n          }\n        }\n      }\n   }\n   return(check_df)\n}\n\n# For each bootSMA and the multiple pairwise comparison between functional groups\n# count if there was a significant difference\nmultcomp_check <- function(x) {\n  multcomp_check_df <- data.frame(j_fg_1 = x$multcompresult[, 1], \n                  j_fg_2 = x$multcompresult[, 2],\n                  sig_diff = 0\n             )\n  for (i in 1:length(x$multcompresult[, 1])) {\n    if (x$multcompresult$Pval[i] <= 0.05) {\n      multcomp_check_df$sig_diff[i] <- 1\n    }\n  }\n  return(multcomp_check_df)\n}\n\n# Make a summary df for each bootSMA object\nmk_boot_summ_df <- function(x) {\n  #browser()\n  #print(x)\n  p_from <- x$from$Pi\n  b_from <- x$from$BI\n  z_from <- x$from$ZP\n  h_from <- x$from$He\n  c_from <- x$from$C\n#\n  p_to <- x$to$Pi\n  b_to <- x$to$BI\n  z_to <- x$to$ZP\n  h_to <- x$to$He\n  c_to <- x$to$C\n#\n  p_slp <- x$groupsummary$Slope[1]\n  b_slp <- x$groupsummary$Slope[2]\n  z_slp <- x$groupsummary$Slope[3]\n  h_slp <- x$groupsummary$Slope[4]\n  c_slp <- x$groupsummary$Slope[5]\n#\n  p_int <- x$groupsummary$Int[1]\n  b_int <- x$groupsummary$Int[2]\n  z_int <- x$groupsummary$Int[3]\n  h_int <- x$groupsummary$Int[4]\n  c_int <- x$groupsummary$Int[5]\n#\n  p_r2  <- x$groupsummary$r2[1]\n  b_r2  <- x$groupsummary$r2[2]\n  z_r2  <- x$groupsummary$r2[3]\n  h_r2  <- x$groupsummary$r2[4]\n  c_r2  <- x$groupsummary$r2[5]\n#\n  group <- c(\"Pi\", \"BI\", \"ZP\", \"He\", \"C\")\n#\n  summ_df <- data.frame(j_fg = group, \n              from  = c(p_from, b_from, z_from, h_from, c_from),\n              to    = c(p_to, b_to, z_to, h_to, c_to), \n              slope = c(p_slp, b_slp, z_slp, h_slp, c_slp), \n              int   = c(p_int, b_int, z_int, h_int, c_int),\n              r2    = c(p_r2, b_r2, z_r2, h_r2, c_r2)\n         )\n  return(summ_df)\n  summ_df\n}\n\n\nget_mean_slope_int_r2 <- function(x) {\n  mean_slope <- mean(x$slope)\n  mean_int <- mean(x$int)\n  mean_r2 <- mean(x$r2)\n  se <- sd(x$slope)\n  df <- data.frame(slope = mean_slope, int = mean_int, r2 = mean_r2, slope_se = se)\n  return(df)\n}\n\nget_y_FromTo <- function(x) {\n  yfrom = 10^(x$slope * log10(x$from) + x$int)\n  yto   = 10^(x$slope * log10(x$to) + x$int)\n  midpoint_y = sqrt(yfrom * yto)\n  midpoint_x = sqrt(x$from * x$to)\n  ref_intercept = log10(midpoint_y / midpoint_x^2)\n  df = data.frame(yfrom = yfrom, yto = yto, ref_intercept)\n  return(df)\n}\n\nwrite_bootSMA_eqn <- function(boot_df) {\n    #browser()\n    l <- list(slope = format(boot_df$slope, digits=2, nsmall = 2),\n              int = format(boot_df$int, digits=2, nsmall = 2), \n              r2  = format(boot_df$r2, digits=2, nsmall = 2),\n              count   = boot_df$n\n    )\n    print(l)\n    if (l$int >= 0) {\n      eqn_r2 <- substitute(atop(italic(r)^2~\"=\"~r2, italic(y) ==\n                          slope%.%italic(x) + int), l)\n      eqn <- substitute(italic(y) == slope*italic(x) + int, l)\n      r2  <- substitute(italic(r)^2~\"=\"~r2, l)\n      n   <- substitute(italic(n) ~ \"=\" ~ count, l)\n    } else {\n        l <- list(slope = format(boot_df$slope, digits=2, nsmall = 2),\n                  int = format(abs(boot_df$int), digits=2, nsmall = 2),\n                  r2  = format(boot_df$r2, digits=2, nsmall = 2),\n                  count   = boot_df$n\n      )\n      eqn_r2 <- substitute(atop(italic(r)^2~\"=\"~r2, italic(y) ==\n                          slope%.% italic(x) - int), l)\n      eqn <- substitute(italic(y) == slope*italic(x) - int, l)\n      r2  <- substitute(italic(r)^2~\"=\"~r2, l)\n      n   <- substitute(italic(n) ~ \"=\" ~ count, l)\n    }    \n    #browser()\n    eqn_r2 <- as.character(as.expression(eqn_r2)) \n    eqn    <- as.character(as.expression(eqn))\n    r2     <- as.character(as.expression(r2))\n    n      <- as.character(as.expression(n))\n    df <- data.frame(eqn_r2 = eqn_r2, eqn = eqn, r2 = r2, n = n)\n    return(df)\n  }\n\n",
			"file": "03_func.r",
			"file_size": 40277,
			"file_write_time": 130985667180000000,
			"settings":
			{
				"buffer_size": 40298,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 107.0,
		"last_filter": "synrex",
		"selected_items":
		[
			[
				"synrex",
				"Set Syntax: R Extended"
			],
			[
				"replr",
				"SublimeREPL: R"
			],
			[
				"repl",
				"SublimeREPL: R"
			],
			[
				"repl: r",
				"SublimeREPL: R"
			],
			[
				"repr",
				"SublimeREPL: R"
			],
			[
				"syntrex",
				"Set Syntax: R Extended"
			],
			[
				"syntr",
				"Set Syntax: R"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: lis",
				"Package Control: List Packages"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"Package Control: rem",
				"Package Control: Remove Package"
			],
			[
				"pythvi",
				"SublimeREPL: Python - virtualenv"
			],
			[
				"Package Control: upda",
				"Package Control: Upgrade Package"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade/Overwrite All Packages"
			]
		],
		"width": 488.0
	},
	"console":
	{
		"height": 170.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jillian/R_projects/Allometry"
	],
	"file_history":
	[
		"/Users/jillian/R_projects/Allometry/Script order to reproduce ms outputs",
		"/Users/jillian/R_projects/Allometry/get_max_lengths_from_fishbase.R",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/User/SublimeREPL.sublime-settings",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/Users/jillian/R_projects/Allometry/01_load.r",
		"/Users/jillian/R_projects/Allometry/theory_graph.r",
		"/Users/jillian/R_projects/Allometry/11_pgls_with_yerror.R",
		"/Users/jillian/R_projects/Allometry/theory_graph_2.R",
		"/Users/jillian/R_projects/Allometry/Plots_for_gape_ms.R",
		"/Users/jillian/R_projects/Allometry/bootstrap_for_ms.r",
		"/Users/jillian/R_projects/Allometry/03_func.r",
		"/Users/jillian/R_projects/Allometry/bootstrap_for_pgls.r",
		"/Users/jillian/R_projects/Allometry/05_sma_analysis.r",
		"/Users/jillian/R_projects/Allometry/bootstrap_for_ms_pgls_with_y_error.R",
		"/Users/jillian/R_projects/Allometry/02_clean.r",
		"/Users/jillian/R_projects/Allometry/04_analysis.r",
		"/Users/jillian/R_projects/Allometry/bootstrap_graphs.R",
		"/Users/jillian/R_projects/Allometry/noCaranx_bootstrap.r",
		"/Users/jillian/R_projects/Allometry/Allometry.Rproj",
		"/Users/jillian/R_projects/Allometry/08_gape_ms_SOM_plots.R",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/User/bh_core.sublime-settings",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/BracketHighlighter/Example.sublime-keymap",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/User/JSON.sublime-settings",
		"/Users/jillian/R_projects/Allometry/06_sma_round_2.R",
		"/Users/jillian/R_projects/Allometry/sma_random_effects.R",
		"/Users/jillian/R_projects/Allometry/KI_map.R",
		"/Users/jillian/R_projects/Allometry/Old_code/figuring out the piscs.R",
		"/Users/jillian/R_projects/Allometry/Quartz_setup.R",
		"/Users/jillian/R_projects/Allometry/KI_maps/attempt1.R",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/jillian/R_projects/KI_maps/attempt1.R",
		"/Users/jillian/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/User/SublimeREPL.sublime-settings",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/jillian/Databases/fishdb/csvimport.py",
		"/Users/jillian/Dropbox/Stable isotope database/input_data/CW_merged_isotope_dissections2011.csv",
		"/Users/jillian/Dropbox/Stable isotope database/input_data/CW_dis_merged_2012.csv",
		"/Users/jillian/Dropbox/Stable isotope database/input_data/RT_dissections10.csv",
		"/Users/jillian/Dropbox/Stable isotope database/input_data/2011_KI_fish_dissections.csv",
		"/Users/jillian/Databases/fishdb/new_configs.slate",
		"/Users/jillian/Databases/fishdb/gape_export_July09_for_MS",
		"/Users/jillian/Databases/fishdb/all_SI_results.py",
		"/Users/jillian/Databases/fishdb/apps/helpers/models.py",
		"/Users/jillian/Databases/fishdb/query_scripts/si_results_status.py",
		"/Users/jillian/Databases/fishdb/apps/species/admin.py",
		"/Users/jillian/Databases/fishdb/apps/data/admin.py",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/Users/jillian/Databases/fishdb/shark_data_export.py",
		"/Users/jillian/Databases/fishdb/query_scripts/Pi_todo_list_export.py",
		"/Users/jillian/Databases/fishdb/NA_fish_submission_counts.py",
		"/Users/jillian/Databases/fishdb/apps/data/models.py",
		"/Users/jillian/Databases/fishdb/fishdb/urls.py",
		"/Users/jillian/Databases/fishdb/fishdb/settings.py",
		"/Users/jillian/Databases/fishdb/manage.py",
		"/Users/jillian/Databases/fishdb/apps/species/models.py",
		"/Users/jillian/Databases/fishdb/funnel_report.py",
		"/Users/jillian/Databases/fishdb/sql.py",
		"/Users/jillian/Databases/fishdb/apps/sharks/models.py",
		"/Users/jillian/Dropbox/Stable isotope database/input_data/csv_data/Taxonomies.csv",
		"/Applications/R64.app/Contents/MacOS/R",
		"/Users/jillian/Databases/fishdb/query_scripts/stomach_counts.py",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/jillian/Databases/fishdb/shark_data_SI_export.py",
		"/Users/jillian/Databases/fishdb/shark_data_SI_export_Jun05.csv",
		"/Users/jillian/Databases/fishdb/pp_SI_results.py",
		"/Users/jillian/Databases/fishdb/lost_samples.py",
		"/Users/jillian/Databases/fishdb/get_packed_samps.py",
		"/Users/jillian/Databases/fishdb/fish_SI_results.py",
		"/Users/jillian/Databases/fishdb/schema/schema_May2013.dot",
		"/Users/jillian/Databases/fishdb/fishdb/backup/models.py",
		"/Users/jillian/Databases/fishdb/fishdb/backup/admin.py",
		"/Users/jillian/Databases/fishdb/apps/sharks/admin.py",
		"/Users/jillian/Databases/fishdb/fishdb.dot",
		"/Users/jillian/R_projects/plotting and graphics workshop/graphics packages.r",
		"/Users/jillian/R_projects/modelling tools workshop/modelling tools.R",
		"/Users/jillian/Databases/fishdb/fish_specimens_herbert_counts.py",
		"/Users/jillian/Databases/fishdb/venv/lib/python2.7/site-packages/data_exports/migrations/0004_auto__del_field_export_display_labels.py",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/User/Default (OSX).sublime-keymap",
		"/Users/jillian/Databases/fishdb/si_results_status.py",
		"/Users/jillian/Documents/fishdb.sublime-project",
		"/Users/jillian/Databases/fishdb/apps/helpers/admin.py",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/User/fishdb_venv_repl.sublime-build",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/User/SublimeREPLHistory/fishdb_python_venv.sublime-build",
		"/Users/jillian/Databases/fishdb/fishdb/admin.py",
		"/Users/jillian/Databases/fishdb/fishdb/wsgi.py",
		"/Users/jillian/Databases/fishdb/schema/graphviz_script.py",
		"/Users/jillian/Databases/fishdb/missing_preps.py",
		"/Users/jillian/Databases/fishdb/query specimens.py",
		"/Users/jillian/Databases/fishdb/fishdb/models.py",
		"/Users/jillian/Databases/fishdb/missing_preprocessings.py",
		"/Users/jillian/Databases/fishdb/spp_collected_2012_for_AnimalCare.py",
		"/Users/jillian/Databases/fishdb/apps/shark_models.py",
		"/Users/jillian/Databases/fishdb/apps/shark_admin.py",
		"/Users/jillian/Databases/fishdb/apps/species_models.py",
		"/Users/jillian/Databases/fishdb/fishdb/species_admin.py",
		"/Users/jillian/Databases/fishdb/fishdb/data_models.py",
		"/Users/jillian/Databases/fishdb/apps/data_admin.py",
		"/Users/jillian/Databases/fishdb/fishdb/helper_models.py",
		"/Users/jillian/Databases/fishdb/apps/helper_admin.py",
		"/Users/jillian/Databases/fishdb/fishdb/helper.py",
		"/Users/jillian/Databases/fishdb/trophic data query.py",
		"/Users/jillian/Databases/fishdb/Pi_todo_list_export.py",
		"/Users/jillian/Databases/fishdb/stomach_counts.py",
		"/Users/jillian/Databases/fishdb/fishdb/helper_tables.py",
		"/Users/jillian/Databases/fishdb/queries/stomach_counts.py",
		"/Users/jillian/Databases/fishdb/fishdb/get_packed_samps.py",
		"/Users/jillian/dev/zoops_db/non_zoops_db_files/year_data_with_oxygen.py",
		"/Users/jillian/Databases/fishdb/Migration record",
		"/Users/jillian/Databases/fishdb/my_project.dot",
		"/Users/jillian/Databases/fishdb/trophic query",
		"/Users/jillian/Databases/fishdb/packing_dupes_script",
		"/Users/jillian/dev/zoops_db/non_zoops_db_files/lts_effect_all_species.py",
		"/Users/jillian/Databases/fishdb/cleanup.py",
		"/Users/jillian/dev/zoops_db/non_zoops_db_files/excel_import.py",
		"/Users/jillian/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/jillian/Desktop/SQL_SI_db.sql",
		"/Users/jillian/Databases/fishdb/csv_data/HouseholdSurveys.csv",
		"/Users/jillian/Dropbox/Stable isotope database/SI_DB/PrimaryProducers",
		"/Users/jillian/dev/zoops_db/__init__.py",
		"/Users/jillian/Downloads/sleepdata.csv",
		"/Users/jillian/Desktop/CSC 371/Lab Oct 12.sql",
		"/Users/jillian/Desktop/CSC 371/oracle_create.sql",
		"/Users/jillian/dev/Resumes/Resume_2012_10.tex",
		"/Users/jillian/Downloads/SampleIndexData/KI_SampInd_UnMatched_Known_Treat.csv",
		"/Users/jillian/Dropbox/Stable isotope database/input data for cleanup/isotope_rinsing_2010_ForImport.csv"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"fishdb/fishdb.dot",
			"/fishdb.dot",
			"",
			"csvimport.py",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Species",
			"caranx melampygus",
			"docs",
			"species_list",
			"size_ranges",
			"segment",
			"max",
			"allGW_bySpp_summ",
			"allGW_bySPP_summ",
			"allGH_bySpp_summ",
			"allGH_bySPP_summ",
			"allGH_bySpp_summ",
			"allGW_bySPP_summ",
			"allGH_bySPP_summ",
			"all_spp_GH",
			"colour",
			"gh_benth_pisc_zoop_panel_figure_label.png",
			"cairo",
			"cairo_pdf",
			"cairo_ps",
			"line_fits",
			"gh_plot",
			"gw_plot",
			"top",
			"gh",
			"test",
			"mean_spp_summ_gh2",
			"visregFit",
			"mean_spp_summ_gh2",
			"mean_spp_summ_gh",
			"visreg",
			"pento_by_slope",
			"mean_spp_summ_gh",
			"master",
			"6.75",
			"eqn_y",
			"acnigr",
			"r2_y",
			"eqn_y",
			"3.35",
			"mk_multipanel_plots2",
			"mk_spp_summary",
			"dev.new",
			"multi",
			"allGW_bySPP_summ",
			"grouping",
			"allGW_bySPP_summ",
			"mk_smaSPP_graph_df",
			"mk_spp_summary",
			"allGW_bySpp_summ",
			"mk_spp_summary",
			"mk_smaSPP_graph_df",
			"mk_spp_summary",
			"mk_smaSPP_graph_df",
			"spp_lines",
			"FALSE",
			"TRUE",
			"pento_by_slope_gh",
			"sp_name_by_slope",
			"pento_by_slope",
			"6.65",
			"5.2",
			"= 3.5",
			"max",
			"height",
			"fg_GH",
			"gh",
			"allGH",
			"10",
			"= 6.2",
			"= 4.9",
			"= 30",
			"=16",
			"= 7",
			"7",
			"boot_graph_df",
			"all_fg_GH_graph_df",
			"ref_intercept",
			"int",
			"= slope",
			"slope",
			"8.5",
			"4.2",
			"-1.3",
			"n_y",
			"r2_y",
			"-1.8",
			"55",
			"1",
			"area",
			"eqn_y",
			"ref_intercept",
			"slope",
			"ref_intercept",
			"#ref_intercept_row = spp_lines$ref_intercept[5], ",
			"int",
			"slp",
			"ref_intercept",
			"= slope",
			"slope",
			"ref_intercept_iso",
			"slp",
			" \n",
			"slp",
			"slope = slope",
			"slope",
			"int",
			"slope",
			"boot_graph_df",
			"130",
			"midpoint_y",
			"all_fg_GH_graph_df",
			"all_fg_GH_summ",
			"#",
			"int",
			"ref_n",
			"int",
			"ref_intercept",
			"int",
			"slope",
			"ref_intercept",
			"boot_graph_df",
			"ref_intercept",
			"midpoint",
			"slope",
			"boot_graph_df",
			"slp",
			"fg_line_intercept"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"sharkhhsjoins",
			"SharkHhsJoins",
			"sharkhhsjoins",
			"SharkHhsJoins",
			"sharkhhsjoins",
			"SharkHhsJoins",
			"EnteredBy",
			"'rU'",
			"row[",
			"decimal_places",
			" self.wt",
			"auriga,C",
			"ornatissimus,C",
			"_1,",
			"_1"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "11_pgls_with_yerror.R",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18286,
						"regions":
						{
						},
						"selection":
						[
							[
								17639,
								17639
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"r_box_status": false,
							"syntax": "Packages/R-Box/syntax/R Extended.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "plots_for_ms_species_gape_heights.R",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36596,
						"regions":
						{
						},
						"selection":
						[
							[
								798,
								798
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"r_box_status": false,
							"syntax": "Packages/R-Box/syntax/R Extended.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "plots_for_ms_species_gape_widths.R",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28820,
						"regions":
						{
						},
						"selection":
						[
							[
								20966,
								20966
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"r_box_status": false,
							"syntax": "Packages/R-Box/syntax/R Extended.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7032.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "04_analysis.r",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56439,
						"regions":
						{
						},
						"selection":
						[
							[
								46438,
								46438
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"r_box_status": false,
							"syntax": "Packages/R-Box/syntax/R Extended.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20230.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "01_load.r",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2354,
						"regions":
						{
						},
						"selection":
						[
							[
								2353,
								2353
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"r_box_status": false,
							"syntax": "Packages/R-Box/syntax/R Extended.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 285.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "03_func.r",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40298,
						"regions":
						{
						},
						"selection":
						[
							[
								23116,
								23116
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"r_box_status": false,
							"syntax": "Packages/R-Box/syntax/R Extended.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8709.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "allometry.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"func",
				"03_func.r"
			],
			[
				"theor",
				"theory_graph.r"
			],
			[
				"04",
				"04_analysis.r"
			],
			[
				"03",
				"03_func.r"
			],
			[
				"fun",
				"03_func.r"
			],
			[
				"0",
				"05_sma_analysis.r"
			],
			[
				"",
				"sma_random_effects.R"
			],
			[
				"sma",
				"06_sma_round_2.R"
			],
			[
				"admin",
				"apps/data/admin.py"
			],
			[
				"species",
				"apps/species/models.py"
			],
			[
				"helper",
				"apps/helpers/models.py"
			],
			[
				"models",
				"apps/data/models.py"
			],
			[
				"help",
				"apps/helpers/models.py"
			],
			[
				"man",
				"manage.py"
			],
			[
				"shark",
				"shark_data_SI_export.py"
			],
			[
				"chema",
				"schema/schema_May2013.dot"
			],
			[
				"backup",
				"fishdb/backup/models.py"
			],
			[
				"backupad",
				"fishdb/backup/admin.py"
			],
			[
				"sharksadmin",
				"apps/sharks/admin.py"
			],
			[
				"fish",
				"fishdb.dot"
			],
			[
				"shark_data_export",
				"shark_data_export.py"
			],
			[
				"fishdb",
				"fishdb.dot"
			],
			[
				"sharks",
				"apps/sharks/models.py"
			],
			[
				"helpe",
				"apps/helpers/models.py"
			],
			[
				"datamodels",
				"apps/data/models.py"
			],
			[
				"datamoesl",
				"venv/lib/python2.7/site-packages/data_exports/migrations/0004_auto__del_field_export_display_labels.py"
			],
			[
				"speciesmodels",
				"apps/species/models.py"
			],
			[
				"data",
				"apps/data/admin.py"
			],
			[
				"helpersmod",
				"apps/helpers/models.py"
			],
			[
				"helpers",
				"apps/helpers/admin.py"
			],
			[
				"data/ad",
				"apps/data/admin.py"
			],
			[
				"query_scripts/",
				"query_scripts/Pi_todo_list_export.py"
			],
			[
				"manage",
				"manage.py"
			],
			[
				"urls",
				"fishdb/urls.py"
			],
			[
				"dataadmin",
				"apps/data/admin.py"
			],
			[
				"settings",
				"fishdb/settings.py"
			],
			[
				"na",
				"NA_fish_submission_counts.py"
			],
			[
				"sharksmodels",
				"apps/sharks/models.py"
			],
			[
				"speciesmoe",
				"apps/species/models.py"
			],
			[
				"speciesadmin",
				"apps/species/admin.py"
			],
			[
				"data/mod",
				"apps/data/models.py"
			],
			[
				"shark/mod",
				"apps/sharks/models.py"
			],
			[
				"apps/species/mod",
				"apps/species/models.py"
			],
			[
				"help/mod",
				"apps/helpers/models.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 197.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
